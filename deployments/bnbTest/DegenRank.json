{
  "address": "0x8190aa73eBE01db942901EEa8c6f6c96F98fc532",
  "abi": [],
  "transactionHash": "0x15505a4622fbff72e4728d4c8fe0dc192c293a00d37b89a02bd549b3e2d2fab2",
  "receipt": {
    "to": null,
    "from": "0xe0B4c9C36f5A5D0Ff3A547FeaBB6BC9Ba65805F2",
    "contractAddress": "0x8190aa73eBE01db942901EEa8c6f6c96F98fc532",
    "transactionIndex": 1,
    "gasUsed": "1288564",
    "logsBloom": "0x
    "blockHash": "0xd78ad86fd13d863a30d7208d4fbed229fc6fdaa4e29ba91c9d65c9ee675a66c5",
    "transactionHash": "0x15505a4622fbff72e4728d4c8fe0dc192c293a00d37b89a02bd549b3e2d2fab2",
    "logs": [],
    "blockNumber": 27773233,
    "cumulativeGasUsed": "1343855",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "88551474ac7d667cbb6243b62e37c485",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_enterTvlRank(SingleRanking.Data storage,BitMapsUpgradeable.BitMap storage,mapping(uint256 => uint256) storage,uint256,uint256)\":{\"details\":\"set a new value in tree, only save top x largest value\",\"params\":{\"value\":\"new value enters in the tree\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DegenRank.sol\":\"DegenRank\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363738303037313639313639\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMapsUpgradeable {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x93282769cdd2804524608a8a23f6d42b888ec0acb36eabd1d5f84b2bf1f374f3\",\"license\":\"MIT\"},\"src/DegenRank.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\nimport {SingleRanking} from \\\"src/lib/SingleRanking.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\n\\nlibrary DegenRank {\\n    using SingleRanking for SingleRanking.Data;\\n    using BitMapsUpgradeable for BitMapsUpgradeable.BitMap;\\n\\n    function _enterScoreRank(\\n        SingleRanking.Data storage _scoreRank,\\n        SingleRanking.Data storage _tributeRank,\\n        BitMapsUpgradeable.BitMap storage _isTopHundredScore,\\n        mapping(uint256 => uint256) storage _oldStakeAmounts,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external {\\n        if (value == 0) {\\n            return;\\n        }\\n        // only when length is larger than 100, remove\\n        if (SingleRanking.length(_scoreRank) >= 100) {\\n            uint256 minValue = _scoreRank.getNthValue(99);\\n            // get the 100th value and compare, if new value is smaller, nothing happen\\n            if (value <= minValue) {\\n                return;\\n            }\\n            // remove the smallest in the score rank\\n            uint256 tokenIdWithMinmalScore = _scoreRank.get(99, 1)[0];\\n            _scoreRank.remove(tokenIdWithMinmalScore, minValue);\\n\\n            // also remove it from tvl rank\\n            _isTopHundredScore.unset(tokenIdWithMinmalScore);\\n            _exitTvlRank(\\n                _tributeRank,\\n                _oldStakeAmounts,\\n                tokenIdWithMinmalScore\\n            );\\n        }\\n\\n        // add to score rank\\n        _scoreRank.add(tokenId, value);\\n        // can enter the tvl rank\\n        _isTopHundredScore.set(tokenId);\\n\\n        // Enter as a very small value, just ensure it's not zero and pass check\\n        // it doesn't matter too much as really stake has decimal with 18.\\n        // General value woule be much larger than 1\\n        _enterTvlRank(\\n            _tributeRank,\\n            _isTopHundredScore,\\n            _oldStakeAmounts,\\n            tokenId,\\n            1\\n        );\\n    }\\n\\n    /**\\n     * @dev set a new value in tree, only save top x largest value\\n     * @param value new value enters in the tree\\n     */\\n    function _enterTvlRank(\\n        SingleRanking.Data storage _tributeRank,\\n        BitMapsUpgradeable.BitMap storage _isTopHundredScore,\\n        mapping(uint256 => uint256) storage _oldStakeAmounts,\\n        uint256 tokenId,\\n        uint256 value\\n    ) public {\\n        // if it's not one hundred score, nothing happens\\n        if (!_isTopHundredScore.get(tokenId)) {\\n            return;\\n        }\\n\\n        // remove old value from the rank, keep one token Id only one value\\n        if (_oldStakeAmounts[tokenId] != 0) {\\n            _tributeRank.remove(tokenId, _oldStakeAmounts[tokenId]);\\n        }\\n        _tributeRank.add(tokenId, value);\\n        _oldStakeAmounts[tokenId] = value;\\n    }\\n\\n    /**\\n     * @dev if the tokenId's value is zero, it exits the ranking\\n     * @param tokenId pool tokenId\\n     */\\n    function _exitTvlRank(\\n        SingleRanking.Data storage _tributeRank,\\n        mapping(uint256 => uint256) storage _oldStakeAmounts,\\n        uint256 tokenId\\n    ) internal {\\n        if (_oldStakeAmounts[tokenId] != 0) {\\n            _tributeRank.remove(tokenId, _oldStakeAmounts[tokenId]);\\n            delete _oldStakeAmounts[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0a9ed4d9a3013e2fca5aa0e6d7f713629acd65157640aed4a1a88c6c185840b\",\"license\":\"GPL-3.0\"},\"src/lib/FastArray.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// A simple array that supports insert and removal.\\n// The values are assumed to be unique and the library is meant to be lightweight.\\n// So when calling insert or remove, the caller is responsible to know whether a value already exists in the array or not.\\nlibrary FastArray {\\n    struct Data {\\n        mapping(uint256 => uint256) array;\\n        mapping(uint256 => uint256) indexMap;\\n        uint256 length;\\n    }\\n\\n    /**\\n     * @notice please confirm no eq item exist before insert\\n     */\\n    function insert(Data storage _fastArray, uint256 _value) internal {\\n        _fastArray.array[_fastArray.length] = _value;\\n        _fastArray.indexMap[_value] = _fastArray.length;\\n        _fastArray.length += 1;\\n    }\\n\\n    /**\\n     * @dev remove item from array,but not keep rest item sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function remove(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        _fastArray.array[index] = _fastArray.array[_fastArray.length - 1];\\n        delete _fastArray.indexMap[_value];\\n        delete _fastArray.array[_fastArray.length - 1];\\n\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @dev remove item and keep rest item in sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function removeKeepSort(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        uint256 tempLastItem = _fastArray.array[_fastArray.length - 1];\\n\\n        for (uint256 i = index; i < _fastArray.length - 1; i++) {\\n            _fastArray.indexMap[_fastArray.array[i + 1]] = i;\\n            _fastArray.array[i] = _fastArray.array[i + 1];\\n        }\\n\\n        delete _fastArray.indexMap[tempLastItem];\\n        delete _fastArray.array[_fastArray.length - 1];\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @notice PLease confirm index is not out of bounds\\n     */\\n    function get(\\n        Data storage _fastArray,\\n        uint256 _index\\n    ) public view returns (uint256) {\\n        return _fastArray.array[_index];\\n    }\\n\\n    function length(Data storage _fastArray) public view returns (uint256) {\\n        return _fastArray.length;\\n    }\\n\\n    function contains(\\n        Data storage _fastArray,\\n        uint256 _value\\n    ) public view returns (bool) {\\n        return _fastArray.indexMap[_value] != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1aafe47d78876fe514a190e95a87f4720f33617712c66cf95ab73c6dc3a19f3d\",\"license\":\"UNLICENSED\"},\"src/lib/RankingRedBlackTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// A red-black tree that holds a \\\"count\\\" variable next to the value in the tree.\\n// This library is used to resolve which values should be skipped to respect the _offset when querying from the rank library.\\n// The focal function is \\\"lastByOffset\\\" which starts from the largest value in the tree and traverses backwards to find the\\n// first value that is included in the offset specified and returns it.\\n// The nodes are accessed by a key and other properties can be queried using the key.\\n// This library is a modification of BokkyPooBah's Red-Black Tree Library which has a MIT licence.\\n// Following is the original description and the license:\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n// Here is the license attached to this library:\\n// ----------------------------------------------------------------------------\\n// MIT License\\n//\\n// Copyright (c) 2018 The Officious BokkyPooBah\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n// ----------------------------------------------------------------------------\\nlibrary RankingRedBlackTree {\\n    struct Node {\\n        uint id;\\n        uint value;\\n        uint count;\\n        uint parent;\\n        uint left;\\n        uint right;\\n        bool red;\\n    }\\n\\n    struct Tree {\\n        uint root;\\n        mapping(uint => Node) nodes;\\n        uint counter;\\n    }\\n\\n    uint private constant EMPTY = 0;\\n\\n    function first(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].left != EMPTY) {\\n                _key = self.nodes[_key].left;\\n            }\\n        }\\n    }\\n\\n    function last(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].right != EMPTY) {\\n                _key = self.nodes[_key].right;\\n            }\\n        }\\n    }\\n\\n    function lastByOffset(\\n        Tree storage self,\\n        uint _offset\\n    ) public view returns (uint, uint) {\\n        uint key = last(self);\\n\\n        while (key != EMPTY && _offset > self.nodes[key].count) {\\n            _offset -= self.nodes[key].count;\\n            key = prev(self, key);\\n        }\\n\\n        return (key, _offset);\\n    }\\n\\n    function next(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function find(Tree storage self, uint _value) public view returns (uint) {\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            if (_value == self.nodes[probe].value) {\\n                return probe;\\n            }\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        return EMPTY;\\n    }\\n\\n    function value(Tree storage self, uint _key) public view returns (uint) {\\n        return self.nodes[_key].value;\\n    }\\n\\n    function addToCount(Tree storage self, uint _value, uint amount) internal {\\n        self.nodes[find(self, _value)].count += amount;\\n    }\\n\\n    function minusFromCount(\\n        Tree storage self,\\n        uint _value,\\n        uint amount\\n    ) internal {\\n        self.nodes[find(self, _value)].count -= amount;\\n    }\\n\\n    function insert(Tree storage self, uint _value) internal returns (uint) {\\n        uint cursor = EMPTY;\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.counter += 1;\\n        self.nodes[self.counter] = Node({\\n            id: self.counter,\\n            value: _value,\\n            count: 1,\\n            parent: cursor,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true\\n        });\\n        if (cursor == EMPTY) {\\n            self.root = self.counter;\\n        } else if (_value < self.nodes[cursor].value) {\\n            self.nodes[cursor].left = self.counter;\\n        } else {\\n            self.nodes[cursor].right = self.counter;\\n        }\\n        insertFixup(self, self.counter);\\n        return self.counter;\\n    }\\n\\n    function remove(Tree storage self, uint _value) internal {\\n        uint key = find(self, _value);\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function removeWithKey(Tree storage self, uint key) internal {\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function treeMinimum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].right;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].left;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(self, self.nodes[keyParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[keyParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(Tree storage self, uint a, uint b) private {\\n        uint bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n\",\"keccak256\":\"0x37e4825ff13d1868ec248d4fd3657e1074456733a82079c424ff0f2fe22f7163\",\"license\":\"MIT\"},\"src/lib/SingleRanking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\nimport \\\"./FastArray.sol\\\";\\nimport \\\"./RankingRedBlackTree.sol\\\";\\n\\nlibrary SingleRanking {\\n    using FastArray for FastArray.Data;\\n    using RankingRedBlackTree for RankingRedBlackTree.Tree;\\n\\n    struct Data {\\n        RankingRedBlackTree.Tree tree;\\n        mapping(uint => FastArray.Data) keys;\\n        uint length;\\n    }\\n\\n    function add(Data storage _singleRanking, uint _key, uint _value) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) == 0) {\\n            _singleRanking.tree.insert(_value);\\n        } else {\\n            _singleRanking.tree.addToCount(_value, 1);\\n        }\\n\\n        _singleRanking.keys[_value].insert(_key);\\n\\n        _singleRanking.length += 1;\\n    }\\n\\n    function remove(\\n        Data storage _singleRanking,\\n        uint _key,\\n        uint _value\\n    ) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) > 0) {\\n            keys.remove(_key);\\n\\n            if (FastArray.length(keys) == 0) {\\n                _singleRanking.tree.remove(_value);\\n            } else {\\n                _singleRanking.tree.minusFromCount(_value, 1);\\n            }\\n        }\\n\\n        _singleRanking.length -= 1;\\n    }\\n\\n    function length(Data storage _singleRanking) public view returns (uint) {\\n        return _singleRanking.length;\\n    }\\n\\n    function get(\\n        Data storage _singleRanking,\\n        uint _offset,\\n        uint _count\\n    ) public view returns (uint[] memory) {\\n        require(_offset >= 0, \\\"Offet can not be negative\\\");\\n        require(\\n            _count >= 0 && _count <= 100,\\n            \\\"Count must be between 0 and 100\\\"\\n        );\\n\\n        uint[] memory result = new uint[](_count);\\n        uint size = 0;\\n        uint id;\\n        (id, _offset) = _singleRanking.tree.lastByOffset(_offset);\\n\\n        while (id != 0) {\\n            uint value = _singleRanking.tree.value(id);\\n            FastArray.Data storage keys = _singleRanking.keys[value];\\n\\n            if (_offset >= FastArray.length(keys)) {\\n                _offset -= FastArray.length(keys);\\n            } else if (FastArray.length(keys) < _offset + _count) {\\n                uint index = FastArray.length(keys) - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n\\n                _count -= FastArray.length(keys) - _offset;\\n                _offset = 0;\\n            } else {\\n                uint index = _count - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n                // result[size] = value;\\n                break;\\n            }\\n\\n            id = _singleRanking.tree.prev(id);\\n        }\\n\\n        return result;\\n    }\\n\\n    function getNthValue(\\n        Data storage _singleRanking,\\n        uint n\\n    ) public view returns (uint) {\\n        require(n >= 0, \\\"order can not be negative\\\");\\n        (uint256 id, ) = _singleRanking.tree.lastByOffset(n);\\n        uint value = _singleRanking.tree.value(id);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x829e3a1c656abb979f5fbcbda503fb907ed68771850908a9e65fc46f32795133\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806346dc98fc14610045578063f0f2cef714610067575b600080fd5b81801561005157600080fd5b50610065610060366004611467565b610087565b005b81801561007357600080fd5b506100656100823660046114a2565b6100ea565b6100918483610321565b156100e357600082815260208490526040902054156100c6576000828152602084905260409020546100c69086908490610346565b6100d1858383610493565b60008281526020849052604090208190555b5050505050565b8015610319576040516358816afd60e11b81526004810187905260649073__$69292ab8e6f98571d324d08d63c6dae4eb$__9063b102d5fa90602401602060405180830381865af4158015610143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016791906114e5565b106102e157604051636bd8216560e11b8152600481018790526063602482015260009073__$69292ab8e6f98571d324d08d63c6dae4eb$__9063d7b042ca90604401602060405180830381865af41580156101c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ea91906114e5565b90508082116101f95750610319565b604051634d63fffd60e01b815260048101889052606360248201526001604482015260009073__$69292ab8e6f98571d324d08d63c6dae4eb$__90634d63fffd90606401600060405180830381865af415801561025a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102829190810190611514565b600081518110610294576102946115d2565b602002602001015190506102b381838a6103469092919063ffffffff16565b600881901c60009081526020879052604090208054600160ff84161b191690556102de87868361056a565b50505b6102ec868383610493565b600882901c60009081526020859052604090208054600160ff85161b179055610319858585856001610087565b505050505050565b600881901c600090815260208390526040902054600160ff83161b1615155b92915050565b600081815260038401602052604080822090516305f739f960e21b81526004810182905290919073__$f445361e8b50888b0b8cee3fd4db50a783$__906317dce7e490602401602060405180830381865af41580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd91906114e5565b1115610473576103dd81846105af565b6040516305f739f960e21b81526004810182905273__$f445361e8b50888b0b8cee3fd4db50a783$__906317dce7e490602401602060405180830381865af415801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906114e5565b600003610467576104628483610648565b610473565b61047384836001610891565b600184600401600082825461048891906115fe565b909155505050505050565b60008181526003840160205260409081902090516305f739f960e21b81526004810182905273__$f445361e8b50888b0b8cee3fd4db50a783$",
  "libraries": {
    "SingleRanking": "0x32e942D8A758D3Ddc45d5faEC998D5a415b0846b",
    "FastArray": "0x08c89ea9F6a4140dE96f335162aB89251b210DAf",
    "RankingRedBlackTree": "0x142485a98D3237e7D882b65d9CAb25a925425607"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_enterTvlRank(SingleRanking.Data storage,BitMapsUpgradeable.BitMap storage,mapping(uint256 => uint256) storage,uint256,uint256)": {
        "details": "set a new value in tree, only save top x largest value",
        "params": {
          "value": "new value enters in the tree"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}