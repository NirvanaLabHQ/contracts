{
  "address": "0xA1Aa4713da58E9709838f5eF065d40734fb47696",
  "abi": [],
  "transactionHash": "0x474e5805b3e8dc3f071a49b3715361e5b8b5a948d7679853a51b6d1bcd7825a0",
  "receipt": {
    "to": null,
    "from": "0xe0B4c9C36f5A5D0Ff3A547FeaBB6BC9Ba65805F2",
    "contractAddress": "0xA1Aa4713da58E9709838f5eF065d40734fb47696",
    "transactionIndex": 4,
    "gasUsed": "1291999",
    "logsBloom": "0x
    "blockHash": "0xe71b6554ca0186ee6eb992f7c181ce0ac3c527858ebf132f5cc86caa8ec8df77",
    "transactionHash": "0x474e5805b3e8dc3f071a49b3715361e5b8b5a948d7679853a51b6d1bcd7825a0",
    "logs": [],
    "blockNumber": 27912562,
    "cumulativeGasUsed": "1571320",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "2d2ed35dc101d5cd9b44626a5bcdbbc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_enterTvlRank(SingleRanking.Data storage,BitMapsUpgradeable.BitMap storage,mapping(uint256 => uint256) storage,uint256,uint256)\":{\"details\":\"set a new value in tree, only save top x largest value\",\"params\":{\"value\":\"new value enters in the tree\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DegenRank.sol\":\"DegenRank\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363738343235333330303038\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMapsUpgradeable {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x93282769cdd2804524608a8a23f6d42b888ec0acb36eabd1d5f84b2bf1f374f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/DegenRank.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\nimport {SingleRanking} from \\\"src/lib/SingleRanking.sol\\\";\\nimport {IRebornPortal} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\n\\nlibrary DegenRank {\\n    using SingleRanking for SingleRanking.Data;\\n    using BitMapsUpgradeable for BitMapsUpgradeable.BitMap;\\n\\n    function _enterScoreRank(\\n        IRebornPortal.SeasonData storage _seasonData,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external {\\n        if (value == 0) {\\n            return;\\n        }\\n        // only when length is larger than 100, remove\\n        if (SingleRanking.length(_seasonData._scoreRank) >= 100) {\\n            // get the 100th value and compare, if new value is smaller, nothing happen\\n            if (value <= _seasonData._minScore) {\\n                return;\\n            }\\n            // remove the smallest in the score rank\\n            uint256 tokenIdWithMinmalScore = _seasonData._scoreRank.get(99, 1)[\\n                0\\n            ];\\n            _seasonData._scoreRank.remove(tokenIdWithMinmalScore, _seasonData._minScore);\\n\\n            // also remove it from tvl rank\\n            _seasonData._isTopHundredScore.unset(tokenIdWithMinmalScore);\\n            _exitTvlRank(\\n                _seasonData._tributeRank,\\n                _seasonData._oldStakeAmounts,\\n                tokenIdWithMinmalScore\\n            );\\n\\n            // set min value\\n            _seasonData._minScore = _seasonData._scoreRank.getNthValue(99);\\n        }\\n\\n        // add to score rank\\n        _seasonData._scoreRank.add(tokenId, value);\\n        // can enter the tvl rank\\n        _seasonData._isTopHundredScore.set(tokenId);\\n\\n        // Enter as a very small value, just ensure it's not zero and pass check\\n        // it doesn't matter too much as really stake has decimal with 18.\\n        // General value woule be much larger than 1\\n        _enterTvlRank(\\n            _seasonData._tributeRank,\\n            _seasonData._isTopHundredScore,\\n            _seasonData._oldStakeAmounts,\\n            tokenId,\\n            1\\n        );\\n    }\\n\\n    /**\\n     * @dev set a new value in tree, only save top x largest value\\n     * @param value new value enters in the tree\\n     */\\n    function _enterTvlRank(\\n        SingleRanking.Data storage _tributeRank,\\n        BitMapsUpgradeable.BitMap storage _isTopHundredScore,\\n        mapping(uint256 => uint256) storage _oldStakeAmounts,\\n        uint256 tokenId,\\n        uint256 value\\n    ) public {\\n        // if it's not one hundred score, nothing happens\\n        if (!_isTopHundredScore.get(tokenId)) {\\n            return;\\n        }\\n\\n        // remove old value from the rank, keep one token Id only one value\\n        if (_oldStakeAmounts[tokenId] != 0) {\\n            _tributeRank.remove(tokenId, _oldStakeAmounts[tokenId]);\\n        }\\n        _tributeRank.add(tokenId, value);\\n        _oldStakeAmounts[tokenId] = value;\\n    }\\n\\n    /**\\n     * @dev if the tokenId's value is zero, it exits the ranking\\n     * @param tokenId pool tokenId\\n     */\\n    function _exitTvlRank(\\n        SingleRanking.Data storage _tributeRank,\\n        mapping(uint256 => uint256) storage _oldStakeAmounts,\\n        uint256 tokenId\\n    ) internal {\\n        if (_oldStakeAmounts[tokenId] != 0) {\\n            _tributeRank.remove(tokenId, _oldStakeAmounts[tokenId]);\\n            delete _oldStakeAmounts[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbaadebc3df8cb6405d2ec4d342f2d6bf3c8915e4d5995ff411220f23aced5f91\",\"license\":\"GPL-3.0\"},\"src/PortalLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\nimport {IRebornDefination} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {RewardVault} from \\\"src/RewardVault.sol\\\";\\n\\nlibrary PortalLib {\\n    uint256 public constant PERSHARE_BASE = 10e18;\\n    // percentage base of refer reward fees\\n    uint256 public constant PERCENTAGE_BASE = 10000;\\n\\n    enum RewardType {\\n        NativeToken,\\n        RebornToken\\n    }\\n\\n    struct ReferrerRewardFees {\\n        uint16 incarnateRef1Fee;\\n        uint16 incarnateRef2Fee;\\n        uint16 vaultRef1Fee;\\n        uint16 vaultRef2Fee;\\n        uint192 _slotPlaceholder;\\n    }\\n\\n    struct Pool {\\n        uint256 totalAmount;\\n        uint256 accRebornPerShare;\\n        uint256 accNativePerShare;\\n        uint256 epoch;\\n        uint256 lastUpdated;\\n    }\\n\\n    struct Portfolio {\\n        uint256 accumulativeAmount;\\n        uint256 rebornRewardDebt;\\n        uint256 nativeRewardDebt;\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (Amount * pool.accPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user infuse or switchPool. Here's what happens:\\n        //   1. The pool's `accPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n\\n        /// @dev reward for holding the NFT when the NFT is selected\\n        uint256 pendingOwnerRebornReward;\\n        uint256 pendingOwernNativeReward;\\n    }\\n\\n    struct AirdropConf {\\n        uint8 _dropOn; //                  ---\\n        uint40 _rebornDropInterval; //        |\\n        uint40 _nativeDropInterval; //        |\\n        uint40 _rebornDropLastUpdate; //      |\\n        uint40 _nativeDropLastUpdate; //      |\\n        uint16 _nativeTopDropRatio; //        |\\n        uint16 _nativeRaffleDropRatio; //   |\\n        uint16 _rebornTopEthAmount; // |\\n        uint40 _rebornRaffleEthAmount; //    ---\\n    }\\n\\n    struct VrfConf {\\n        bytes32 keyHash;\\n        uint64 s_subscriptionId;\\n        uint32 callbackGasLimit;\\n        uint32 numWords;\\n        uint16 requestConfirmations;\\n    }\\n\\n    event DropNative(uint256 indexed tokenId);\\n    event DropReborn(uint256 indexed tokenId);\\n    event ClaimRebornDrop(uint256 indexed tokenId, uint256 rebornAmount);\\n    event ClaimNativeDrop(uint256 indexed tokenId, uint256 nativeAmount);\\n    event NewDropConf(AirdropConf conf);\\n    event NewVrfConf(VrfConf conf);\\n    event SignerUpdate(address signer, bool valid);\\n    event ReferReward(\\n        address indexed user,\\n        address indexed ref1,\\n        uint256 amount1,\\n        address indexed ref2,\\n        uint256 amount2,\\n        PortalLib.RewardType rewardType\\n    );\\n\\n    function _claimPoolRebornDrop(\\n        uint256 tokenId,\\n        RewardVault vault,\\n        mapping(uint256 => Pool) storage pools,\\n        mapping(address => mapping(uint256 => Portfolio)) storage portfolios\\n    ) external {\\n        Pool storage pool = pools[tokenId];\\n        Portfolio storage portfolio = portfolios[msg.sender][tokenId];\\n\\n        if (portfolio.accumulativeAmount == 0) {\\n            return;\\n        }\\n\\n        uint256 pendingReborn = (portfolio.accumulativeAmount *\\n            pool.accRebornPerShare) /\\n            PERSHARE_BASE -\\n            portfolio.rebornRewardDebt +\\n            portfolio.pendingOwnerRebornReward;\\n\\n        // set current amount as debt\\n        portfolio.rebornRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accRebornPerShare) /\\n            PERSHARE_BASE;\\n\\n        // clean up reward as owner\\n        portfolio.pendingOwnerRebornReward = 0;\\n\\n        /// @dev send drop\\n        if (pendingReborn != 0) {\\n            vault.reward(msg.sender, pendingReborn);\\n        }\\n\\n        emit ClaimRebornDrop(tokenId, pendingReborn);\\n    }\\n\\n    function _claimPoolNativeDrop(\\n        uint256 tokenId,\\n        mapping(uint256 => Pool) storage pools,\\n        mapping(address => mapping(uint256 => Portfolio)) storage portfolios\\n    ) external {\\n        Pool storage pool = pools[tokenId];\\n        Portfolio storage portfolio = portfolios[msg.sender][tokenId];\\n\\n        if (portfolio.accumulativeAmount == 0) {\\n            return;\\n        }\\n\\n        uint256 pendingNative = (portfolio.accumulativeAmount *\\n            pool.accNativePerShare) /\\n            PERSHARE_BASE -\\n            portfolio.nativeRewardDebt +\\n            portfolio.pendingOwernNativeReward;\\n\\n        // set current amount as debt\\n        portfolio.nativeRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accNativePerShare) /\\n            PERSHARE_BASE;\\n\\n        // clean up reward as owner\\n        portfolio.pendingOwernNativeReward = 0;\\n\\n        /// @dev send drop\\n        if (pendingNative != 0) {\\n            payable(msg.sender).transfer(pendingNative);\\n\\n            emit ClaimNativeDrop(tokenId, pendingNative);\\n        }\\n    }\\n\\n    function _flattenRewardDebt(\\n        Pool storage pool,\\n        Portfolio storage portfolio\\n    ) external {\\n        // flatten native reward\\n        portfolio.nativeRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accNativePerShare) /\\n            PERSHARE_BASE;\\n\\n        // flatten reborn reward\\n        portfolio.rebornRewardDebt =\\n            (portfolio.accumulativeAmount * pool.accRebornPerShare) /\\n            PERSHARE_BASE;\\n    }\\n\\n    /**\\n     * @dev calculate drop from a pool\\n     */\\n    function _calculatePoolDrop(\\n        uint256 tokenId,\\n        mapping(uint256 => Pool) storage pools,\\n        mapping(address => mapping(uint256 => Portfolio)) storage portfolios\\n    ) public view returns (uint256 pendingNative, uint256 pendingReborn) {\\n        Pool storage pool = pools[tokenId];\\n        Portfolio storage portfolio = portfolios[msg.sender][tokenId];\\n\\n        // if no portfolio, no pending reward\\n        if (portfolio.accumulativeAmount == 0) {\\n            return (pendingNative, pendingReborn);\\n        }\\n\\n        pendingNative =\\n            (portfolio.accumulativeAmount * pool.accNativePerShare) /\\n            PERSHARE_BASE -\\n            portfolio.nativeRewardDebt +\\n            portfolio.pendingOwernNativeReward;\\n\\n        pendingReborn =\\n            (portfolio.accumulativeAmount * pool.accRebornPerShare) /\\n            PERSHARE_BASE -\\n            portfolio.rebornRewardDebt +\\n            portfolio.pendingOwnerRebornReward;\\n    }\\n\\n    /**\\n     * @dev read pending reward from specific pool\\n     * @param tokenIds tokenId array of the pools\\n     */\\n    function _pendingDrop(\\n        mapping(uint256 => Pool) storage pools,\\n        mapping(address => mapping(uint256 => Portfolio)) storage portfolios,\\n        uint256[] memory tokenIds\\n    ) external view returns (uint256 pNative, uint256 pReborn) {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            (uint256 n, uint256 r) = _calculatePoolDrop(\\n                tokenIds[i],\\n                pools,\\n                portfolios\\n            );\\n            pNative += n;\\n            pReborn += r;\\n        }\\n    }\\n\\n    function _directDropNativeToTopTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            // if tokenId is zero , return\\n            if (tokenId == 0) {\\n                return;\\n            }\\n\\n            Pool storage pool = _seasonData.pools[tokenId];\\n\\n            // if no one tribute, return\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            uint256 dropAmount = (_dropConf._nativeTopDropRatio *\\n                address(this).balance) / PortalLib.PERCENTAGE_BASE;\\n\\n            // 80% to pool\\n            pool.accNativePerShare +=\\n                (((dropAmount * 4)) * PortalLib.PERSHARE_BASE) /\\n                (PERCENTAGE_BASE * 5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = _seasonData.portfolios[owner][\\n                tokenId\\n            ];\\n            portfolio.pendingOwernNativeReward += (dropAmount * 1) / 5;\\n\\n            emit DropNative(tokenId);\\n        }\\n    }\\n\\n    function _directDropNativeToRaffleTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        IRebornDefination.SeasonData storage _seasonData\\n    ) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            // if tokenId is zero , return\\n            if (tokenId == 0) {\\n                return;\\n            }\\n\\n            Pool storage pool = _seasonData.pools[tokenId];\\n\\n            // if no one tribute, return\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            uint256 dropAmount = (_dropConf._nativeRaffleDropRatio *\\n                address(this).balance) / PortalLib.PERCENTAGE_BASE;\\n\\n            // 80% to pool\\n            pool.accNativePerShare +=\\n                (((dropAmount * 4)) * PortalLib.PERSHARE_BASE) /\\n                (PERCENTAGE_BASE * 5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = _seasonData.portfolios[owner][\\n                tokenId\\n            ];\\n            portfolio.pendingOwernNativeReward += (dropAmount * 1) / 5;\\n\\n            emit DropNative(tokenId);\\n        }\\n    }\\n\\n    function _directDropRebornToTopTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        mapping(uint256 => Pool) storage pools,\\n        mapping(address => mapping(uint256 => Portfolio)) storage portfolios\\n    ) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            // if tokenId is zero, continue\\n            if (tokenId == 0) {\\n                return;\\n            }\\n            Pool storage pool = pools[tokenId];\\n\\n            // if no one tribute, continue\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            uint256 dropAmount = uint256(_dropConf._rebornTopEthAmount) *\\n                1 ether;\\n\\n            // 80% to pool\\n            pool.accRebornPerShare +=\\n                (dropAmount * 4 * PortalLib.PERSHARE_BASE) /\\n                (5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = portfolios[owner][tokenId];\\n            portfolio.pendingOwnerRebornReward += (dropAmount * 1) / 5;\\n\\n            emit DropReborn(tokenId);\\n        }\\n    }\\n\\n    function _directDropRebornToRaffleTokenIds(\\n        uint256[] memory tokenIds,\\n        AirdropConf storage _dropConf,\\n        mapping(uint256 => Pool) storage pools,\\n        mapping(address => mapping(uint256 => Portfolio)) storage portfolios\\n    ) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            // if tokenId is zero, continue\\n            if (tokenId == 0) {\\n                return;\\n            }\\n            Pool storage pool = pools[tokenId];\\n\\n            // if no one tribute, continue\\n            // as it's loof from high tvl to low tvl\\n            if (pool.totalAmount == 0) {\\n                return;\\n            }\\n\\n            uint256 dropAmount = uint256(_dropConf._rebornRaffleEthAmount) *\\n                1 ether;\\n\\n            // 80% to pool\\n            pool.accRebornPerShare +=\\n                (dropAmount * 4 * PortalLib.PERSHARE_BASE) /\\n                (5 * pool.totalAmount);\\n\\n            // 20% to owner\\n            address owner = IERC721(address(this)).ownerOf(tokenId);\\n            Portfolio storage portfolio = portfolios[owner][tokenId];\\n            portfolio.pendingOwnerRebornReward += (dropAmount * 1) / 5;\\n\\n            emit DropReborn(tokenId);\\n        }\\n    }\\n\\n    function _toLastHour(uint256 timestamp) internal pure returns (uint256) {\\n        return timestamp - (timestamp % (1 hours));\\n    }\\n\\n    /**\\n     * @dev update signers\\n     * @param toAdd list of to be added signer\\n     * @param toRemove list of to be removed signer\\n     */\\n    function _updateSigners(\\n        mapping(address => bool) storage signers,\\n        address[] calldata toAdd,\\n        address[] calldata toRemove\\n    ) public {\\n        for (uint256 i = 0; i < toAdd.length; i++) {\\n            signers[toAdd[i]] = true;\\n            emit SignerUpdate(toAdd[i], true);\\n        }\\n        for (uint256 i = 0; i < toRemove.length; i++) {\\n            delete signers[toRemove[i]];\\n            emit SignerUpdate(toRemove[i], false);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns referrer and referer reward\\n     * @return ref1  level1 of referrer. direct referrer\\n     * @return ref1Reward  level 1 referrer reward\\n     * @return ref2  level2 of referrer. referrer's referrer\\n     * @return ref2Reward  level 2 referrer reward\\n     */\\n    function _calculateReferReward(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        address account,\\n        uint256 amount,\\n        RewardType rewardType\\n    )\\n        public\\n        view\\n        returns (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        )\\n    {\\n        ref1 = referrals[account];\\n        ref2 = referrals[ref1];\\n\\n        if (rewardType == RewardType.NativeToken) {\\n            ref1Reward = ref1 == address(0)\\n                ? 0\\n                : (amount * rewardFees.incarnateRef1Fee) /\\n                    PortalLib.PERCENTAGE_BASE;\\n            ref2Reward = ref2 == address(0)\\n                ? 0\\n                : (amount * rewardFees.incarnateRef2Fee) /\\n                    PortalLib.PERCENTAGE_BASE;\\n        }\\n\\n        if (rewardType == RewardType.RebornToken) {\\n            ref1Reward = ref1 == address(0)\\n                ? 0\\n                : (amount * rewardFees.vaultRef1Fee) /\\n                    PortalLib.PERCENTAGE_BASE;\\n            ref2Reward = ref2 == address(0)\\n                ? 0\\n                : (amount * rewardFees.vaultRef2Fee) /\\n                    PortalLib.PERCENTAGE_BASE;\\n        }\\n    }\\n\\n    /**\\n     * @notice mul 100 when set. eg: 8% -> 800 18%-> 1800\\n     * @dev set percentage of referrer reward\\n     * @param rewardType 0: incarnate reward 1: engrave reward\\n     */\\n    function _setReferrerRewardFee(\\n        ReferrerRewardFees storage rewardFees,\\n        uint16 refL1Fee,\\n        uint16 refL2Fee,\\n        PortalLib.RewardType rewardType\\n    ) external {\\n        if (rewardType == PortalLib.RewardType.NativeToken) {\\n            rewardFees.incarnateRef1Fee = refL1Fee;\\n            rewardFees.incarnateRef2Fee = refL2Fee;\\n        } else if (rewardType == PortalLib.RewardType.RebornToken) {\\n            rewardFees.vaultRef1Fee = refL1Fee;\\n            rewardFees.vaultRef2Fee = refL2Fee;\\n        }\\n    }\\n\\n    /**\\n     * @dev send NativeToken to referrers\\n     */\\n    function _sendRewardToRefs(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        address account,\\n        uint256 amount\\n    ) public {\\n        (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        ) = _calculateReferReward(\\n                referrals,\\n                rewardFees,\\n                account,\\n                amount,\\n                PortalLib.RewardType.NativeToken\\n            );\\n\\n        if (ref1Reward > 0) {\\n            payable(ref1).transfer(ref1Reward);\\n        }\\n\\n        if (ref2Reward > 0) {\\n            payable(ref2).transfer(ref2Reward);\\n        }\\n\\n        emit ReferReward(\\n            account,\\n            ref1,\\n            ref1Reward,\\n            ref2,\\n            ref2Reward,\\n            PortalLib.RewardType.NativeToken\\n        );\\n    }\\n\\n    /**\\n     * @dev vault $REBORN token to referrers\\n     */\\n    function _vaultRewardToRefs(\\n        mapping(address => address) storage referrals,\\n        ReferrerRewardFees storage rewardFees,\\n        RewardVault vault,\\n        address account,\\n        uint256 amount\\n    ) public {\\n        (\\n            address ref1,\\n            uint256 ref1Reward,\\n            address ref2,\\n            uint256 ref2Reward\\n        ) = _calculateReferReward(\\n                referrals,\\n                rewardFees,\\n                account,\\n                amount,\\n                PortalLib.RewardType.RebornToken\\n            );\\n\\n        if (ref1Reward > 0) {\\n            vault.reward(ref1, ref1Reward);\\n        }\\n\\n        if (ref2Reward > 0) {\\n            vault.reward(ref2, ref2Reward);\\n        }\\n\\n        emit ReferReward(\\n            account,\\n            ref1,\\n            ref1Reward,\\n            ref2,\\n            ref2Reward,\\n            PortalLib.RewardType.RebornToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf227a604ef74c2e9cb995533aee8cdea1fdf38cdb54d4d5f1d2339b04b1ce476\",\"license\":\"GPL-3.0\"},\"src/RewardVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IRewardVault} from \\\"src/interfaces/IRewardVault.sol\\\";\\n\\ncontract RewardVault is IRewardVault, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public rebornToken;\\n\\n    constructor(address owner_, address rebornToken_) {\\n        if (rebornToken_ == address(0)) revert ZeroAddressSet();\\n        _transferOwnership(owner_);\\n        rebornToken = rebornToken_;\\n    }\\n\\n    /**\\n     * @notice Send reward to user\\n     * @param to The address of awards\\n     * @param amount number of awards\\n     */\\n    function reward(address to, uint256 amount)\\n        external\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        IERC20(rebornToken).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice withdraw token Emergency\\n     */\\n    function withdrawEmergency(address to) external virtual override onlyOwner {\\n        if (to == address(0)) revert ZeroAddressSet();\\n        IERC20(rebornToken).safeTransfer(\\n            to,\\n            IERC20(rebornToken).balanceOf(address(this))\\n        );\\n        emit WithdrawEmergency(\\n            rebornToken,\\n            IERC20(rebornToken).balanceOf(address(this))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xbfd36456540376a7303f8c2d0796824571e015c3815f3c8bc5144091434afa0a\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRebornPortal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {PortalLib} from \\\"src/PortalLib.sol\\\";\\nimport {SingleRanking} from \\\"src/lib/SingleRanking.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\n\\ninterface IRebornDefination {\\n    struct Innate {\\n        uint256 talentPrice;\\n        uint256 propertyPrice;\\n    }\\n\\n    struct LifeDetail {\\n        bytes32 seed;\\n        address creator;\\n        uint16 age;\\n        uint32 round;\\n        uint48 nothing;\\n        uint128 cost;\\n        uint128 reward;\\n        uint256 score;\\n        string creatorName;\\n    }\\n\\n    struct SeasonData {\\n        mapping(uint256 => PortalLib.Pool) pools;\\n        /// @dev user address => pool tokenId => Portfolio\\n        mapping(address => mapping(uint256 => PortalLib.Portfolio)) portfolios;\\n        SingleRanking.Data _tributeRank;\\n        SingleRanking.Data _scoreRank;\\n        mapping(uint256 => uint256) _oldStakeAmounts;\\n        /// tokenId => bool\\n        BitMapsUpgradeable.BitMap _isTopHundredScore;\\n        // the value of minimum score\\n        uint256 _minScore;\\n    }\\n\\n    enum AirdropVrfType {\\n        Invalid,\\n        DropReborn,\\n        DropNative\\n    }\\n\\n    struct RequestStatus {\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        bool executed; // whether the airdrop is executed\\n        AirdropVrfType t;\\n        uint256[] randomWords;\\n    }\\n\\n    event Incarnate(\\n        address indexed user,\\n        uint256 indexed talentPrice,\\n        uint256 indexed PropertyPrice,\\n        uint256 soupPrice\\n    );\\n\\n    event Engrave(\\n        bytes32 indexed seed,\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        uint256 score,\\n        uint256 reward\\n    );\\n\\n    event Infuse(address indexed user, uint256 indexed tokenId, uint256 amount);\\n\\n    event Dry(address indexed user, uint256 indexed tokenId, uint256 amount);\\n\\n    event Baptise(address indexed user, uint256 amount);\\n\\n    event NewSoupPrice(uint256 price);\\n\\n    event Refer(address referee, address referrer);\\n\\n    event DecreaseFromPool(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    event IncreaseToPool(\\n        address indexed account,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    event Drop(uint256[] tokenIds);\\n\\n    event NewSeason(uint256);\\n\\n    /// @dev revert when msg.value is insufficient\\n    error InsufficientAmount();\\n    /// @dev revert when to caller is not signer\\n    error NotSigner();\\n\\n    /// @dev revert when the random seed is duplicated\\n    error SameSeed();\\n\\n    /// @dev revert when set ZeroAddress\\n    error ZeroAddressSet();\\n\\n    /// @dev revert if burnPool address not set when infuse\\n    error NotSetBurnPoolAddress();\\n\\n    /// @dev revert when the drop is not on\\n    error DropOff();\\n}\\n\\ninterface IRebornPortal is IRebornDefination {\\n    /**\\n     * @dev user buy the innate for the life\\n     * @param innate talent and property choice\\n     * @param referrer the referrer address\\n     */\\n    function incarnate(\\n        Innate memory innate,\\n        address referrer,\\n        uint256 soupPrice\\n    ) external payable;\\n\\n    /**\\n     * @dev engrave the result on chain and reward\\n     * @param seed random seed in bytes32\\n     * @param user user address\\n     * @param reward $REBORN user earns, decimal 10^18\\n     * @param score life score\\n     * @param cost user cost for this life\\n     */\\n    function engrave(\\n        bytes32 seed,\\n        address user,\\n        uint256 reward,\\n        uint256 score,\\n        uint256 age,\\n        uint256 cost,\\n        string calldata creatorName\\n    ) external;\\n\\n    /**\\n     * @dev reward for share the game\\n     * @param user user address\\n     * @param amount amount for reward\\n     */\\n    function baptise(address user, uint256 amount) external;\\n\\n    /**\\n     * @dev stake $REBORN on this tombstone\\n     * @param tokenId tokenId of the life to stake\\n     * @param amount stake amount, decimal 10^18\\n     */\\n    function infuse(uint256 tokenId, uint256 amount) external;\\n\\n    /**\\n     * @dev stake $REBORN with permit\\n     * @param tokenId tokenId of the life to stake\\n     * @param amount amount of $REBORN to stake\\n     * @param permitAmount amount of $REBORN to approve\\n     * @param r r of signature\\n     * @param s v of signature\\n     * @param v v of signature\\n     */\\n    function infuse(\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 permitAmount,\\n        uint256 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external;\\n\\n    /**\\n     * @dev switch stake amount from poolFrom to poolTo\\n     * @param fromTokenId tokenId of from pool\\n     * @param toTokenId tokenId of to pool\\n     * @param amount amount to switch\\n     */\\n    function switchPool(\\n        uint256 fromTokenId,\\n        uint256 toTokenId,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev set new airdrop config\\n     */\\n    function setDropConf(PortalLib.AirdropConf calldata conf) external;\\n\\n    /**\\n     * @dev set new chainlink vrf v2 config\\n     */\\n    function setVrfConf(PortalLib.VrfConf calldata conf) external;\\n\\n    /**\\n     * @dev user claim many pools' native token airdrop\\n     * @param tokenIds pools' tokenId array to claim\\n     */\\n    function claimNativeDrops(uint256[] calldata tokenIds) external;\\n\\n    /**\\n     * @dev user claim many pools' reborn token airdrop\\n     * @param tokenIds pools' tokenId array to claim\\n     */\\n    function claimRebornDrops(uint256[] calldata tokenIds) external;\\n\\n    /**\\n     * @dev user claim many pools' airdrop\\n     * @param tokenIds pools' tokenId array to claim\\n     */\\n    function claimDrops(uint256[] calldata tokenIds) external;\\n\\n    /**\\n     * @dev switch to next season, call by owner\\n     */\\n    function toNextSeason() external;\\n}\\n\",\"keccak256\":\"0xbeea06bfe39faf49b281b1afdbdb40e2816c19f2d2fdfad4d057a269d096904e\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRewardVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IRewardVault {\\n    error ZeroAddressSet();\\n    \\n    function reward(address to, uint256 amount) external; // send reward\\n\\n    function withdrawEmergency(address to) external;\\n\\n    event WithdrawEmergency(address p12Token, uint256 amount);\\n}\\n\",\"keccak256\":\"0x45f05e6c373a4bb604ed8f894b77dd363c40bfb9ec171ec720893bb7e39bd45a\",\"license\":\"GPL-3.0\"},\"src/lib/FastArray.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// A simple array that supports insert and removal.\\n// The values are assumed to be unique and the library is meant to be lightweight.\\n// So when calling insert or remove, the caller is responsible to know whether a value already exists in the array or not.\\nlibrary FastArray {\\n    struct Data {\\n        mapping(uint256 => uint256) array;\\n        mapping(uint256 => uint256) indexMap;\\n        uint256 length;\\n    }\\n\\n    /**\\n     * @notice please confirm no eq item exist before insert\\n     */\\n    function insert(Data storage _fastArray, uint256 _value) internal {\\n        _fastArray.array[_fastArray.length] = _value;\\n        _fastArray.indexMap[_value] = _fastArray.length;\\n        _fastArray.length += 1;\\n    }\\n\\n    /**\\n     * @dev remove item from array,but not keep rest item sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function remove(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        _fastArray.array[index] = _fastArray.array[_fastArray.length - 1];\\n        delete _fastArray.indexMap[_value];\\n        delete _fastArray.array[_fastArray.length - 1];\\n\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @dev remove item and keep rest item in sort\\n     * @notice Please confirm array is not empty && item is exist && index not out of bounds\\n     */\\n    function removeKeepSort(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n\\n        uint256 tempLastItem = _fastArray.array[_fastArray.length - 1];\\n\\n        for (uint256 i = index; i < _fastArray.length - 1; i++) {\\n            _fastArray.indexMap[_fastArray.array[i + 1]] = i;\\n            _fastArray.array[i] = _fastArray.array[i + 1];\\n        }\\n\\n        delete _fastArray.indexMap[tempLastItem];\\n        delete _fastArray.array[_fastArray.length - 1];\\n        _fastArray.length -= 1;\\n    }\\n\\n    /**\\n     * @notice PLease confirm index is not out of bounds\\n     */\\n    function get(\\n        Data storage _fastArray,\\n        uint256 _index\\n    ) public view returns (uint256) {\\n        return _fastArray.array[_index];\\n    }\\n\\n    function length(Data storage _fastArray) public view returns (uint256) {\\n        return _fastArray.length;\\n    }\\n\\n    function contains(\\n        Data storage _fastArray,\\n        uint256 _value\\n    ) public view returns (bool) {\\n        return _fastArray.indexMap[_value] != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1aafe47d78876fe514a190e95a87f4720f33617712c66cf95ab73c6dc3a19f3d\",\"license\":\"UNLICENSED\"},\"src/lib/RankingRedBlackTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// A red-black tree that holds a \\\"count\\\" variable next to the value in the tree.\\n// This library is used to resolve which values should be skipped to respect the _offset when querying from the rank library.\\n// The focal function is \\\"lastByOffset\\\" which starts from the largest value in the tree and traverses backwards to find the\\n// first value that is included in the offset specified and returns it.\\n// The nodes are accessed by a key and other properties can be queried using the key.\\n// This library is a modification of BokkyPooBah's Red-Black Tree Library which has a MIT licence.\\n// Following is the original description and the license:\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n// Here is the license attached to this library:\\n// ----------------------------------------------------------------------------\\n// MIT License\\n//\\n// Copyright (c) 2018 The Officious BokkyPooBah\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n// ----------------------------------------------------------------------------\\nlibrary RankingRedBlackTree {\\n    struct Node {\\n        uint id;\\n        uint value;\\n        uint count;\\n        uint parent;\\n        uint left;\\n        uint right;\\n        bool red;\\n    }\\n\\n    struct Tree {\\n        uint root;\\n        mapping(uint => Node) nodes;\\n        uint counter;\\n    }\\n\\n    uint private constant EMPTY = 0;\\n\\n    function first(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].left != EMPTY) {\\n                _key = self.nodes[_key].left;\\n            }\\n        }\\n    }\\n\\n    function last(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].right != EMPTY) {\\n                _key = self.nodes[_key].right;\\n            }\\n        }\\n    }\\n\\n    function lastByOffset(\\n        Tree storage self,\\n        uint _offset\\n    ) public view returns (uint, uint) {\\n        uint key = last(self);\\n\\n        while (key != EMPTY && _offset > self.nodes[key].count) {\\n            _offset -= self.nodes[key].count;\\n            key = prev(self, key);\\n        }\\n\\n        return (key, _offset);\\n    }\\n\\n    function next(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function find(Tree storage self, uint _value) public view returns (uint) {\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            if (_value == self.nodes[probe].value) {\\n                return probe;\\n            }\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        return EMPTY;\\n    }\\n\\n    function value(Tree storage self, uint _key) public view returns (uint) {\\n        return self.nodes[_key].value;\\n    }\\n\\n    function addToCount(Tree storage self, uint _value, uint amount) internal {\\n        self.nodes[find(self, _value)].count += amount;\\n    }\\n\\n    function minusFromCount(\\n        Tree storage self,\\n        uint _value,\\n        uint amount\\n    ) internal {\\n        self.nodes[find(self, _value)].count -= amount;\\n    }\\n\\n    function insert(Tree storage self, uint _value) internal returns (uint) {\\n        uint cursor = EMPTY;\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.counter += 1;\\n        self.nodes[self.counter] = Node({\\n            id: self.counter,\\n            value: _value,\\n            count: 1,\\n            parent: cursor,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true\\n        });\\n        if (cursor == EMPTY) {\\n            self.root = self.counter;\\n        } else if (_value < self.nodes[cursor].value) {\\n            self.nodes[cursor].left = self.counter;\\n        } else {\\n            self.nodes[cursor].right = self.counter;\\n        }\\n        insertFixup(self, self.counter);\\n        return self.counter;\\n    }\\n\\n    function remove(Tree storage self, uint _value) internal {\\n        uint key = find(self, _value);\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function removeWithKey(Tree storage self, uint key) internal {\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function treeMinimum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].right;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].left;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(self, self.nodes[keyParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[keyParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(Tree storage self, uint a, uint b) private {\\n        uint bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n\",\"keccak256\":\"0x37e4825ff13d1868ec248d4fd3657e1074456733a82079c424ff0f2fe22f7163\",\"license\":\"MIT\"},\"src/lib/SingleRanking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\nimport \\\"./FastArray.sol\\\";\\nimport \\\"./RankingRedBlackTree.sol\\\";\\n\\nlibrary SingleRanking {\\n    using FastArray for FastArray.Data;\\n    using RankingRedBlackTree for RankingRedBlackTree.Tree;\\n\\n    struct Data {\\n        RankingRedBlackTree.Tree tree;\\n        mapping(uint => FastArray.Data) keys;\\n        uint length;\\n    }\\n\\n    function add(Data storage _singleRanking, uint _key, uint _value) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) == 0) {\\n            _singleRanking.tree.insert(_value);\\n        } else {\\n            _singleRanking.tree.addToCount(_value, 1);\\n        }\\n\\n        _singleRanking.keys[_value].insert(_key);\\n\\n        _singleRanking.length += 1;\\n    }\\n\\n    function remove(\\n        Data storage _singleRanking,\\n        uint _key,\\n        uint _value\\n    ) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) > 0) {\\n            keys.remove(_key);\\n\\n            if (FastArray.length(keys) == 0) {\\n                _singleRanking.tree.remove(_value);\\n            } else {\\n                _singleRanking.tree.minusFromCount(_value, 1);\\n            }\\n        }\\n\\n        _singleRanking.length -= 1;\\n    }\\n\\n    function length(Data storage _singleRanking) public view returns (uint) {\\n        return _singleRanking.length;\\n    }\\n\\n    function get(\\n        Data storage _singleRanking,\\n        uint _offset,\\n        uint _count\\n    ) public view returns (uint[] memory) {\\n        require(_offset >= 0, \\\"Offet can not be negative\\\");\\n        require(\\n            _count >= 0 && _count <= 100,\\n            \\\"Count must be between 0 and 100\\\"\\n        );\\n\\n        uint[] memory result = new uint[](_count);\\n        uint size = 0;\\n        uint id;\\n        (id, _offset) = _singleRanking.tree.lastByOffset(_offset);\\n\\n        while (id != 0) {\\n            uint value = _singleRanking.tree.value(id);\\n            FastArray.Data storage keys = _singleRanking.keys[value];\\n\\n            if (_offset >= FastArray.length(keys)) {\\n                _offset -= FastArray.length(keys);\\n            } else if (FastArray.length(keys) < _offset + _count) {\\n                uint index = FastArray.length(keys) - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n\\n                _count -= FastArray.length(keys) - _offset;\\n                _offset = 0;\\n            } else {\\n                uint index = _count - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n                // result[size] = value;\\n                break;\\n            }\\n\\n            id = _singleRanking.tree.prev(id);\\n        }\\n\\n        return result;\\n    }\\n\\n    function getNthValue(\\n        Data storage _singleRanking,\\n        uint n\\n    ) public view returns (uint) {\\n        require(n >= 0, \\\"order can not be negative\\\");\\n        (uint256 id, ) = _singleRanking.tree.lastByOffset(n);\\n        uint value = _singleRanking.tree.value(id);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x829e3a1c656abb979f5fbcbda503fb907ed68771850908a9e65fc46f32795133\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x61166a61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806346dc98fc14610045578063dd764a4214610067575b600080fd5b81801561005157600080fd5b5061006561006036600461148e565b610087565b005b81801561007357600080fd5b506100656100823660046114c9565b6100ea565b610091848361034a565b156100e357600082815260208490526040902054156100c6576000828152602084905260409020546100c6908690849061036f565b6100d18583836104bc565b60008281526020849052604090208190555b5050505050565b806000036100f757505050565b6040516358816afd60e11b815260078401600482015260649073bb65762c83A6eE29471AF61d62d36Fb6f40040039063b102d5fa90602401602060405180830381865af415801561014c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017091906114f5565b106102ff5782600e0154811161018557505050565b604051634d63fffd60e01b8152600784016004820152606360248201526001604482015260009073bb65762c83A6eE29471AF61d62d36Fb6f400400390634d63fffd90606401600060405180830381865af41580156101e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102109190810190611524565b600081518110610222576102226115e2565b602002602001015190506102488185600e01548660070161036f9092919063ffffffff16565b600881901c6000908152600d8501602052604090208054600160ff84161b1916905561027b8460020185600c0183610593565b604051636bd8216560e11b81526007850160048201526063602482015273bb65762c83A6eE29471AF61d62d36Fb6f40040039063d7b042ca90604401602060405180830381865af41580156102d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f891906114f5565b600e850155505b61030d6007840183836104bc565b600882901c6000908152600d8401602052604090208054600160ff85161b1790556103458360020184600d0185600c01856001610087565b505050565b600881901c600090815260208390526040902054600160ff83161b1615155b92915050565b600081815260038401602052604080822090516305f739f960e21b815260048101829052909190730A1B039faD9Df98aef44a9603BA94A33f51e94fD906317dce7e490602401602060405180830381865af41580156103d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f691906114f5565b111561049c5761040681846105d6565b6040516305f739f960e21b815260048101829052730A1B039faD9Df98aef44a9603BA94A33f51e94fD906317dce7e490602401602060405180830381865af4158015610456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047a91906114f5565b6000036104905761048b848361066f565b61049c565b61049c848360016108b8565b60018460040160008282546104b1919061160e565b909155505050505050565b60008181526003840160205260409081902090516305f739f960e21b815260048101829052730A1B039faD9Df98aef44a9603BA94A33f51e94fD906317dce7e490602401602060405180830381865af415801561051d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054191906114f5565b6000036105585761055284836108e9565b50610564565b61056484836001610a9a565b6000828152600385016020526040902061057e9084610acb565b60018460040160008282546104b19190611621565b60008181526020839052604090205415610345576000818152602083905260409020546105c3908490839061036f565b6000908152602091909152604081205550565b60008181526001808401602052604082205460028501549092859290916105fd919061160e565b815260208082019290925260409081016000908120548482528684528282205584815260018087019093529081208190556002850154859261063e9161160e565b8152602001908152602001600020600090556001836002016000828254610665919061160e565b9091555050505050565b600061067b8383610b0e565b600081815260018501602052604081206004015491925090819015806106b257506000838152600186016020526040902060050154155b156106be575081610706565b5060008281526001850160205260409020600501545b6000818152600186016020526040902060040154156107065760009081526001850160205260409020600401546106d4565b60008181526001860160205260409020600401541561073a5760008181526001860160205260409020600401549150610751565b600081815260018601602052604090206005015491505b60008181526001860160205260408082206003908101548584529190922090910181905580156107cb57600081815260018701602052604090206004015482036107b057600081815260018701602052604090206004018390556107cf565b600081815260018701602052604090206005018390556107cf565b8286555b600082815260018701602052604090206006015460ff1615848314610862576107f9878487610b92565b60008581526001880160205260408082206004808201548785528385209182018190558452828420600390810188905560058084015490830181905585529284209092018690556006908101549286905201805460ff191660ff90921615159190911790559193915b8015610872576108728785610c15565b505060009081526001948501602052604081208181559485018190556002850181905560038501819055600485018190556005850155505050600601805460ff19169055565b808360010160006108c98686610b0e565b81526020019081526020016000206002016000828254610665919061160e565b815460009081905b801561094957600081815260018087016020526040909120015490915081908410156109305760009081526001850160205260409020600401546108f1565b60009081526001850160205260409020600501546108f1565b600185600201600082825461095e9190611621565b925050819055506040518060e00160405280866002015481526020018581526020016001815260200183815260200160008152602001600081526020016001151581525085600101600087600201548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555090505060008203610a2e5760028501548555610a81565b6000828152600180870160205260409091200154841015610a675760028501546000838152600187016020526040902060040155610a81565b600285015460008381526001870160205260409020600501555b610a8f858660020154611033565b505050506002015490565b80836001016000610aab8686610b0e565b815260200190815260200160002060020160008282546106659190611621565b6002820180546000908152602084815260408083208590558354858452600180880190935290832081905590929190610b05908490611621565b90915550505050565b81546000905b8015610b885760008181526001808601602052604090912001548303610b3b579050610369565b6000818152600180860160205260409091200154831015610b6f576000908152600184016020526040902060040154610b14565b6000908152600184016020526040902060050154610b14565b5060009392505050565b60008181526001840160205260408082206003908101548584529190922090910181905580610bc357828455610c0f565b60008181526001850160205260409020600401548203610bf85760008181526001850160205260409020600401839055610c0f565b600081815260018501602052604090206005018390555b50505050565b60005b82548214801590610c3d5750600082815260018401602052604090206006015460ff16155b15611014576000828152600184016020526040808220600301548083529120600401548303610e3c5760008181526001850160205260408082206005015480835291206006015490925060ff1615610ce4576000828152600180860160205260408083206006908101805460ff19908116909155858552919093209092018054909216179055610ccd84826112ce565b600081815260018501602052604090206005015491505b600082815260018501602052604080822060040154825290206006015460ff16158015610d2e5750600082815260018501602052604080822060050154825290206006015460ff16155b15610d5b57600082815260018581016020526040909120600601805460ff1916909117905591508161100e565b600082815260018501602052604080822060050154825290206006015460ff16610dd957600082815260018086016020526040808320600481015484529083206006908101805460ff1990811690915593869052018054909216179055610dc284836113ae565b600081815260018501602052604090206005015491505b600081815260018501602052604080822060069081018054868552838520808401805460ff909316151560ff199384161790558254821690925560059091015484529190922090910180549091169055610e3384826112ce565b8354925061100e565b60008181526001850160205260408082206004015480835291206006015490925060ff1615610eba576000828152600180860160205260408083206006908101805460ff19908116909155858552919093209092018054909216179055610ea384826113ae565b600081815260018501602052604090206004015491505b600082815260018501602052604080822060050154825290206006015460ff16158015610f045750600082815260018501602052604080822060040154825290206006015460ff16155b15610f3157600082815260018581016020526040909120600601805460ff1916909117905591508161100e565b600082815260018501602052604080822060040154825290206006015460ff16610faf57600082815260018086016020526040808320600581015484529083206006908101805460ff1990811690915593869052018054909216179055610f9884836112ce565b600081815260018501602052604090206004015491505b600081815260018501602052604080822060069081018054868552838520808401805460ff909316151560ff19938416179055825482169092556004909101548452919092209091018054909116905561100984826113ae565b835492505b50610c18565b506000908152600190910160205260409020600601805460ff19169055565b60005b825482148015906110635750600082815260018401602052604080822060030154825290206006015460ff165b156112ac57600082815260018401602052604080822060039081015480845282842090910154835291206004015481036111a15760008181526001850160205260408082206003015482528082206005015480835291206006015490925060ff161561111d576000818152600180860160205260408083206006808201805460ff199081169091558786528386208201805482169055600390920180548652928520018054909116909217909155908290525492506112a6565b600081815260018501602052604090206005015483036111445780925061114484846112ce565b506000828152600180850160205260408083206003908101548085528285206006808201805460ff1990811690915591909301805487529386209092018054909216909317905591819052905461119c9085906113ae565b6112a6565b60008181526001850160205260408082206003015482528082206004015480835291206006015490925060ff1615611227576000818152600180860160205260408083206006808201805460ff199081169091558786528386208201805482169055600390920180548652928520018054909116909217909155908290525492506112a6565b6000818152600185016020526040902060040154830361124e5780925061124e84846113ae565b506000828152600180850160205260408083206003908101548085528285206006808201805460ff199081169091559190930180548752938620909201805490921690931790559181905290546112a69085906112ce565b50611036565b505080546000908152600190910160205260409020600601805460ff19169055565b6000818152600183016020526040808220600581018054600390920154828552928420600401549385905283905591801561131a57600081815260018601602052604090206003018490555b600083815260018601602052604090206003018290558161133d57828555611389565b600082815260018601602052604090206004015484036113725760008281526001860160205260409020600401839055611389565b600082815260018601602052604090206005018390555b5050600081815260019093016020526040808420600401839055918352912060030155565b600081815260018301602052604080822060048101805460039092015482855292842060050154938590528390559180156113fa57600081815260018601602052604090206003018490555b600083815260018601602052604090206003018290558161141d57828555611469565b600082815260018601602052604090206005015484036114525760008281526001860160205260409020600501839055611469565b600082815260018601602052604090206004018390555b5050600081815260019093016020526040808420600501839055918352912060030155565b600080600080600060a086880312156114a657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000806000606084860312156114de57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561150757600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561153757600080fd5b825167ffffffffffffffff8082111561154f57600080fd5b818501915085601f83011261156357600080fd5b8151818111156115755761157561150e565b8060051b604051601f19603f8301168101818110858211171561159a5761159a61150e565b6040529182528482019250838101850191888311156115b857600080fd5b938501935b828510156115d6578451845293850193928501926115bd565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610369576103696115f8565b80820180821115610369576103696115f856fea2646970667358221220d0a1fee7b1bc4e438d494318adf949774f5db8f6b9668647ee4a59cb5de5f24564736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806346dc98fc14610045578063dd764a4214610067575b600080fd5b81801561005157600080fd5b5061006561006036600461148e565b610087565b005b81801561007357600080fd5b506100656100823660046114c9565b6100ea565b610091848361034a565b156100e357600082815260208490526040902054156100c6576000828152602084905260409020546100c6908690849061036f565b6100d18583836104bc565b60008281526020849052604090208190555b5050505050565b806000036100f757505050565b6040516358816afd60e11b815260078401600482015260649073__$69292ab8e6f98571d324d08d63c6dae4eb$__9063b102d5fa90602401602060405180830381865af415801561014c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017091906114f5565b106102ff5782600e0154811161018557505050565b604051634d63fffd60e01b8152600784016004820152606360248201526001604482015260009073__$69292ab8e6f98571d324d08d63c6dae4eb$__90634d63fffd90606401600060405180830381865af41580156101e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102109190810190611524565b600081518110610222576102226115e2565b602002602001015190506102488185600e01548660070161036f9092919063ffffffff16565b600881901c6000908152600d8501602052604090208054600160ff84161b1916905561027b8460020185600c0183610593565b604051636bd8216560e11b81526007850160048201526063602482015273__$69292ab8e6f98571d324d08d63c6dae4eb$__9063d7b042ca90604401602060405180830381865af41580156102d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f891906114f5565b600e850155505b61030d6007840183836104bc565b600882901c6000908152600d8401602052604090208054600160ff85161b1790556103458360020184600d0185600c01856001610087565b505050565b600881901c600090815260208390526040902054600160ff83161b1615155b92915050565b600081815260038401602052604080822090516305f739f960e21b81526004810182905290919073__$f445361e8b50888b0b8cee3fd4db50a783$__906317dce7e490602401602060405180830381865af41580156103d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f691906114f5565b111561049c5761040681846105d6565b6040516305f739f960e21b81526004810182905273__$f445361e8b50888b0b8cee3fd4db50a783$__906317dce7e490602401602060405180830381865af4158015610456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047a91906114f5565b6000036104905761048b848361066f565b61049c565b61049c848360016108b8565b60018460040160008282546104b1919061160e565b909155505050505050565b60008181526003840160205260409081902090516305f739f960e21b81526004810182905273__$f445361e8b50888b0b8cee3fd4db50a783$",
  "libraries": {
    "SingleRanking": "0xbb65762c83A6eE29471AF61d62d36Fb6f4004003",
    "FastArray": "0x0A1B039faD9Df98aef44a9603BA94A33f51e94fD",
    "RankingRedBlackTree": "0x4b52CCE4f798d068773942621f2F5B1C3c4a36a2"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_enterTvlRank(SingleRanking.Data storage,BitMapsUpgradeable.BitMap storage,mapping(uint256 => uint256) storage,uint256,uint256)": {
        "details": "set a new value in tree, only save top x largest value",
        "params": {
          "value": "new value enters in the tree"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}