{
  "address": "0x16a3Ce73fa07F6f57EB6A1f9087807f7f9e36d58",
  "abi": [],
  "transactionHash": "0xe3c053c6c47a27420878bb79e41a2f272e4403164e4352ef451c8253b5d91a9f",
  "receipt": {
    "to": null,
    "from": "0xe0B4c9C36f5A5D0Ff3A547FeaBB6BC9Ba65805F2",
    "contractAddress": "0x16a3Ce73fa07F6f57EB6A1f9087807f7f9e36d58",
    "transactionIndex": 3,
    "gasUsed": "1296217",
    "logsBloom": "0x
    "blockHash": "0xc056eb71074d4e866b4f13ceebcdba3098dcd3860b60c8f0e3936c62f82a6d7c",
    "transactionHash": "0xe3c053c6c47a27420878bb79e41a2f272e4403164e4352ef451c8253b5d91a9f",
    "logs": [],
    "blockNumber": 27690108,
    "cumulativeGasUsed": "1366709",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6364906470134ddbd404daf75e43d15d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_enterTvlRank(SingleRanking.Data storage,BitMapsUpgradeable.BitMap storage,mapping(uint256 => uint256) storage,uint256,uint256)\":{\"details\":\"set a new value in tree, only save top x largest value\",\"params\":{\"value\":\"new value enters in the tree\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DegenRank.sol\":\"DegenRank\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363737373537353837303739\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMapsUpgradeable {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x93282769cdd2804524608a8a23f6d42b888ec0acb36eabd1d5f84b2bf1f374f3\",\"license\":\"MIT\"},\"src/DegenRank.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\nimport {SingleRanking} from \\\"src/lib/SingleRanking.sol\\\";\\nimport {BitMapsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/BitMapsUpgradeable.sol\\\";\\n\\nlibrary DegenRank {\\n    using SingleRanking for SingleRanking.Data;\\n    using BitMapsUpgradeable for BitMapsUpgradeable.BitMap;\\n\\n    function _enterScoreRank(\\n        SingleRanking.Data storage _scoreRank,\\n        SingleRanking.Data storage _tributeRank,\\n        BitMapsUpgradeable.BitMap storage _isTopHundredScore,\\n        mapping(uint256 => uint256) storage _oldStakeAmounts,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external {\\n        if (value == 0) {\\n            return;\\n        }\\n        // only when length is larger than 100, remove\\n        if (SingleRanking.length(_scoreRank) >= 100) {\\n            uint256 minValue = _scoreRank.getNthValue(99);\\n            // get the 100th value and compare, if new value is smaller, nothing happen\\n            if (value <= minValue) {\\n                return;\\n            }\\n            // remove the smallest in the score rank\\n            uint256 tokenIdWithMinmalScore = _scoreRank.get(99, 0)[0];\\n            _scoreRank.remove(tokenIdWithMinmalScore, minValue);\\n\\n            // also remove it from tvl rank\\n            _isTopHundredScore.unset(tokenIdWithMinmalScore);\\n            _exitTvlRank(\\n                _tributeRank,\\n                _oldStakeAmounts,\\n                tokenIdWithMinmalScore\\n            );\\n        }\\n\\n        // add to score rank\\n        _scoreRank.add(tokenId, value);\\n        // can enter the tvl rank\\n        _isTopHundredScore.set(tokenId);\\n\\n        // Enter as a very small value, just ensure it's not zero and pass check\\n        // it doesn't matter too much as really stake has decimal with 18.\\n        // General value woule be much larger than 1\\n        _enterTvlRank(\\n            _tributeRank,\\n            _isTopHundredScore,\\n            _oldStakeAmounts,\\n            tokenId,\\n            1\\n        );\\n    }\\n\\n    /**\\n     * @dev set a new value in tree, only save top x largest value\\n     * @param value new value enters in the tree\\n     */\\n    function _enterTvlRank(\\n        SingleRanking.Data storage _tributeRank,\\n        BitMapsUpgradeable.BitMap storage _isTopHundredScore,\\n        mapping(uint256 => uint256) storage _oldStakeAmounts,\\n        uint256 tokenId,\\n        uint256 value\\n    ) public {\\n        // if it's not one hundred score, nothing happens\\n        if (!_isTopHundredScore.get(tokenId)) {\\n            return;\\n        }\\n\\n        // remove old value from the rank, keep one token Id only one value\\n        if (_oldStakeAmounts[tokenId] != 0) {\\n            _tributeRank.remove(tokenId, _oldStakeAmounts[tokenId]);\\n        }\\n        _tributeRank.add(tokenId, value);\\n        _oldStakeAmounts[tokenId] = value;\\n    }\\n\\n    /**\\n     * @dev if the tokenId's value is zero, it exits the ranking\\n     * @param tokenId pool tokenId\\n     */\\n    function _exitTvlRank(\\n        SingleRanking.Data storage _tributeRank,\\n        mapping(uint256 => uint256) storage _oldStakeAmounts,\\n        uint256 tokenId\\n    ) internal {\\n        if (_oldStakeAmounts[tokenId] != 0) {\\n            _tributeRank.remove(tokenId, _oldStakeAmounts[tokenId]);\\n            delete _oldStakeAmounts[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc638f53df5c37478d416b1c20b0175d5321224063e8b31db7f6add10af439850\",\"license\":\"GPL-3.0\"},\"src/lib/FastArray.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n// A simple array that supports insert and removal.\\n// The values are assumed to be unique and the library is meant to be lightweight.\\n// So when calling insert or remove, the caller is responsible to know whether a value already exists in the array or not.\\nlibrary FastArray {\\n    struct Data {\\n        mapping(uint256 => uint256) array;\\n        mapping(uint256 => uint256) indexMap;\\n        uint256 length;\\n    }\\n\\n    function insert(Data storage _fastArray, uint256 _value) internal {\\n        _fastArray.array[_fastArray.length] = _value;\\n        _fastArray.indexMap[_value] = _fastArray.length;\\n        _fastArray.length += 1;\\n    }\\n\\n    function remove(Data storage _fastArray, uint256 _value) internal {\\n        uint256 index = _fastArray.indexMap[_value];\\n        _fastArray.array[index] = _fastArray.array[_fastArray.length - 1];\\n        delete _fastArray.indexMap[_value];\\n        _fastArray.length -= 1;\\n    }\\n\\n    function get(\\n        Data storage _fastArray,\\n        uint256 _index\\n    ) public view returns (uint256) {\\n        return _fastArray.array[_index];\\n    }\\n\\n    function length(Data storage _fastArray) public view returns (uint256) {\\n        return _fastArray.length;\\n    }\\n\\n    function contains(\\n        Data storage _fastArray,\\n        uint256 _value\\n    ) public view returns (bool) {\\n        return _fastArray.indexMap[_value] != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x843e2ed77a5c12fe71af528cec0ed7c32d479623ee1e7f77dd95bd5a6f536ce2\",\"license\":\"UNLICENSED\"},\"src/lib/RankingRedBlackTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// A red-black tree that holds a \\\"count\\\" variable next to the value in the tree.\\n// This library is used to resolve which values should be skipped to respect the _offset when querying from the rank library.\\n// The focal function is \\\"lastByOffset\\\" which starts from the largest value in the tree and traverses backwards to find the\\n// first value that is included in the offset specified and returns it.\\n// The nodes are accessed by a key and other properties can be queried using the key.\\n// This library is a modification of BokkyPooBah's Red-Black Tree Library which has a MIT licence.\\n// Following is the original description and the license:\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's Red-Black Tree Library v1.0-pre-release-a\\n//\\n// A Solidity Red-Black Tree binary search library to store and access a sorted\\n// list of unsigned integer data. The Red-Black algorithm rebalances the binary\\n// search tree, resulting in O(log n) insert, remove and search time (and ~gas)\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n// Here is the license attached to this library:\\n// ----------------------------------------------------------------------------\\n// MIT License\\n//\\n// Copyright (c) 2018 The Officious BokkyPooBah\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n// ----------------------------------------------------------------------------\\nlibrary RankingRedBlackTree {\\n    struct Node {\\n        uint id;\\n        uint value;\\n        uint count;\\n        uint parent;\\n        uint left;\\n        uint right;\\n        bool red;\\n    }\\n\\n    struct Tree {\\n        uint root;\\n        mapping(uint => Node) nodes;\\n        uint counter;\\n    }\\n\\n    uint private constant EMPTY = 0;\\n\\n    function first(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].left != EMPTY) {\\n                _key = self.nodes[_key].left;\\n            }\\n        }\\n    }\\n\\n    function last(Tree storage self) public view returns (uint _key) {\\n        _key = self.root;\\n        if (_key != EMPTY) {\\n            while (self.nodes[_key].right != EMPTY) {\\n                _key = self.nodes[_key].right;\\n            }\\n        }\\n    }\\n\\n    function lastByOffset(\\n        Tree storage self,\\n        uint _offset\\n    ) public view returns (uint, uint) {\\n        uint key = last(self);\\n\\n        while (key != EMPTY && _offset > self.nodes[key].count) {\\n            _offset -= self.nodes[key].count;\\n            key = prev(self, key);\\n        }\\n\\n        return (key, _offset);\\n    }\\n\\n    function next(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[target].right);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].right) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(\\n        Tree storage self,\\n        uint target\\n    ) public view returns (uint cursor) {\\n        require(target != EMPTY);\\n        if (self.nodes[target].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[target].left);\\n        } else {\\n            cursor = self.nodes[target].parent;\\n            while (cursor != EMPTY && target == self.nodes[cursor].left) {\\n                target = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function find(Tree storage self, uint _value) public view returns (uint) {\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            if (_value == self.nodes[probe].value) {\\n                return probe;\\n            }\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        return EMPTY;\\n    }\\n\\n    function value(Tree storage self, uint _key) public view returns (uint) {\\n        return self.nodes[_key].value;\\n    }\\n\\n    function addToCount(Tree storage self, uint _value, uint amount) internal {\\n        self.nodes[find(self, _value)].count += amount;\\n    }\\n\\n    function minusFromCount(\\n        Tree storage self,\\n        uint _value,\\n        uint amount\\n    ) internal {\\n        self.nodes[find(self, _value)].count -= amount;\\n    }\\n\\n    function insert(Tree storage self, uint _value) internal returns (uint) {\\n        uint cursor = EMPTY;\\n        uint probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (_value < self.nodes[probe].value) {\\n                probe = self.nodes[probe].left;\\n            } else {\\n                probe = self.nodes[probe].right;\\n            }\\n        }\\n        self.counter += 1;\\n        self.nodes[self.counter] = Node({\\n            id: self.counter,\\n            value: _value,\\n            count: 1,\\n            parent: cursor,\\n            left: EMPTY,\\n            right: EMPTY,\\n            red: true\\n        });\\n        if (cursor == EMPTY) {\\n            self.root = self.counter;\\n        } else if (_value < self.nodes[cursor].value) {\\n            self.nodes[cursor].left = self.counter;\\n        } else {\\n            self.nodes[cursor].right = self.counter;\\n        }\\n        insertFixup(self, self.counter);\\n        return self.counter;\\n    }\\n\\n    function remove(Tree storage self, uint _value) internal {\\n        uint key = find(self, _value);\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function removeWithKey(Tree storage self, uint key) internal {\\n        uint probe;\\n        uint cursor; // TODO\\n        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {\\n            cursor = key;\\n        } else {\\n            cursor = self.nodes[key].right;\\n            while (self.nodes[cursor].left != EMPTY) {\\n                cursor = self.nodes[cursor].left;\\n            }\\n        }\\n        if (self.nodes[cursor].left != EMPTY) {\\n            probe = self.nodes[cursor].left;\\n        } else {\\n            probe = self.nodes[cursor].right;\\n        }\\n        uint yParent = self.nodes[cursor].parent;\\n        self.nodes[probe].parent = yParent;\\n        if (yParent != EMPTY) {\\n            if (cursor == self.nodes[yParent].left) {\\n                self.nodes[yParent].left = probe;\\n            } else {\\n                self.nodes[yParent].right = probe;\\n            }\\n        } else {\\n            self.root = probe;\\n        }\\n        bool doFixup = !self.nodes[cursor].red;\\n        if (cursor != key) {\\n            replaceParent(self, cursor, key);\\n            self.nodes[cursor].left = self.nodes[key].left;\\n            self.nodes[self.nodes[cursor].left].parent = cursor;\\n            self.nodes[cursor].right = self.nodes[key].right;\\n            self.nodes[self.nodes[cursor].right].parent = cursor;\\n            self.nodes[cursor].red = self.nodes[key].red;\\n            (cursor, key) = (key, cursor);\\n        }\\n        if (doFixup) {\\n            removeFixup(self, probe);\\n        }\\n        delete self.nodes[cursor];\\n    }\\n\\n    function treeMinimum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].left != EMPTY) {\\n            key = self.nodes[key].left;\\n        }\\n        return key;\\n    }\\n\\n    function treeMaximum(\\n        Tree storage self,\\n        uint key\\n    ) private view returns (uint) {\\n        while (self.nodes[key].right != EMPTY) {\\n            key = self.nodes[key].right;\\n        }\\n        return key;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].right;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorLeft = self.nodes[cursor].left;\\n        self.nodes[key].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].left) {\\n            self.nodes[keyParent].left = cursor;\\n        } else {\\n            self.nodes[keyParent].right = cursor;\\n        }\\n        self.nodes[cursor].left = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint key) private {\\n        uint cursor = self.nodes[key].left;\\n        uint keyParent = self.nodes[key].parent;\\n        uint cursorRight = self.nodes[cursor].right;\\n        self.nodes[key].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = key;\\n        }\\n        self.nodes[cursor].parent = keyParent;\\n        if (keyParent == EMPTY) {\\n            self.root = cursor;\\n        } else if (key == self.nodes[keyParent].right) {\\n            self.nodes[keyParent].right = cursor;\\n        } else {\\n            self.nodes[keyParent].left = cursor;\\n        }\\n        self.nodes[cursor].right = key;\\n        self.nodes[key].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && self.nodes[self.nodes[key].parent].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {\\n                cursor = self.nodes[self.nodes[keyParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].right) {\\n                        key = keyParent;\\n                        rotateLeft(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateRight(self, self.nodes[keyParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[keyParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    key = self.nodes[keyParent].parent;\\n                } else {\\n                    if (key == self.nodes[keyParent].left) {\\n                        key = keyParent;\\n                        rotateRight(self, key);\\n                    }\\n                    keyParent = self.nodes[key].parent;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[keyParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[keyParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(Tree storage self, uint a, uint b) private {\\n        uint bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint key) private {\\n        uint cursor;\\n        while (key != self.root && !self.nodes[key].red) {\\n            uint keyParent = self.nodes[key].parent;\\n            if (key == self.nodes[keyParent].left) {\\n                cursor = self.nodes[keyParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateLeft(self, keyParent);\\n                    cursor = self.nodes[keyParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[keyParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, keyParent);\\n                    key = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[keyParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[keyParent].red = true;\\n                    rotateRight(self, keyParent);\\n                    cursor = self.nodes[keyParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    key = keyParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[keyParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[keyParent].red;\\n                    self.nodes[keyParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, keyParent);\\n                    key = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[key].red = false;\\n    }\\n}\\n\",\"keccak256\":\"0x37e4825ff13d1868ec248d4fd3657e1074456733a82079c424ff0f2fe22f7163\",\"license\":\"MIT\"},\"src/lib/SingleRanking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\nimport \\\"./FastArray.sol\\\";\\nimport \\\"./RankingRedBlackTree.sol\\\";\\n\\nlibrary SingleRanking {\\n    using FastArray for FastArray.Data;\\n    using RankingRedBlackTree for RankingRedBlackTree.Tree;\\n\\n    struct Data {\\n        RankingRedBlackTree.Tree tree;\\n        mapping(uint => FastArray.Data) keys;\\n        uint length;\\n    }\\n\\n    function add(Data storage _singleRanking, uint _key, uint _value) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) == 0) {\\n            _singleRanking.tree.insert(_value);\\n        } else {\\n            _singleRanking.tree.addToCount(_value, 1);\\n        }\\n\\n        _singleRanking.keys[_value].insert(_key);\\n\\n        _singleRanking.length += 1;\\n    }\\n\\n    function remove(\\n        Data storage _singleRanking,\\n        uint _key,\\n        uint _value\\n    ) internal {\\n        FastArray.Data storage keys = _singleRanking.keys[_value];\\n\\n        if (FastArray.length(keys) > 0) {\\n            keys.remove(_key);\\n\\n            if (FastArray.length(keys) == 0) {\\n                _singleRanking.tree.remove(_value);\\n            } else {\\n                _singleRanking.tree.minusFromCount(_value, 1);\\n            }\\n        }\\n\\n        _singleRanking.length -= 1;\\n    }\\n\\n    function length(Data storage _singleRanking) public view returns (uint) {\\n        return _singleRanking.length;\\n    }\\n\\n    function get(\\n        Data storage _singleRanking,\\n        uint _offset,\\n        uint _count\\n    ) public view returns (uint[] memory) {\\n        require(_offset >= 0, \\\"Offet can not be negative\\\");\\n        require(\\n            _count >= 0 && _count <= 100,\\n            \\\"Count must be between 0 and 100\\\"\\n        );\\n\\n        uint[] memory result = new uint[](_count);\\n        uint size = 0;\\n        uint id;\\n        (id, _offset) = _singleRanking.tree.lastByOffset(_offset);\\n\\n        while (id != 0) {\\n            uint value = _singleRanking.tree.value(id);\\n            FastArray.Data storage keys = _singleRanking.keys[value];\\n\\n            if (_offset >= FastArray.length(keys)) {\\n                _offset -= FastArray.length(keys);\\n            } else if (FastArray.length(keys) < _offset + _count) {\\n                uint index = FastArray.length(keys) - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n\\n                _count -= FastArray.length(keys) - _offset;\\n                _offset = 0;\\n            } else {\\n                uint index = _count - 1;\\n\\n                while (index >= _offset) {\\n                    uint key = keys.get(index);\\n\\n                    result[size] = key;\\n                    size += 1;\\n\\n                    if (index == 0) {\\n                        break;\\n                    }\\n\\n                    index -= 1;\\n                }\\n                // result[size] = value;\\n                break;\\n            }\\n\\n            id = _singleRanking.tree.prev(id);\\n        }\\n\\n        return result;\\n    }\\n\\n    function getNthValue(\\n        Data storage _singleRanking,\\n        uint n\\n    ) public view returns (uint) {\\n        require(n >= 0, \\\"order can not be negative\\\");\\n        (uint256 id, ) = _singleRanking.tree.lastByOffset(n);\\n        uint value = _singleRanking.tree.value(id);\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x829e3a1c656abb979f5fbcbda503fb907ed68771850908a9e65fc46f32795133\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x61168261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806346dc98fc14610045578063f0f2cef714610067575b600080fd5b81801561005157600080fd5b5061006561006036600461148f565b610087565b005b81801561007357600080fd5b506100656100823660046114ca565b6100ea565b610091848361036c565b156100e357600082815260208490526040902054156100c6576000828152602084905260409020546100c69086908490610391565b6100d18583836104de565b60008281526020849052604090208190555b5050505050565b8015610364576040517fb102d5fa00000000000000000000000000000000000000000000000000000000815260048101879052606490739383DE04C48323c77a82575dFF98D3589D2138709063b102d5fa90602401602060405180830381865af415801561015c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610180919061150d565b1061032c576040517fd7b042ca0000000000000000000000000000000000000000000000000000000081526004810187905260636024820152600090739383DE04C48323c77a82575dFF98D3589D2138709063d7b042ca90604401602060405180830381865af41580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c919061150d565b905080821161022b5750610364565b6040517f4d63fffd000000000000000000000000000000000000000000000000000000008152600481018890526063602482015260006044820181905290739383DE04C48323c77a82575dFF98D3589D21387090634d63fffd90606401600060405180830381865af41580156102a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cd919081019061153c565b6000815181106102df576102df6115fa565b602002602001015190506102fe81838a6103919092919063ffffffff16565b600881901c60009081526020879052604090208054600160ff84161b191690556103298786836105b5565b50505b6103378683836104de565b600882901c60009081526020859052604090208054600160ff85161b179055610364858585856001610087565b505050505050565b600881901c600090815260208390526040902054600160ff83161b1615155b92915050565b600081815260038401602052604080822090516305f739f960e21b815260048101829052909190738DDF64Ad32a151A9df1C9Ab726D688E8A2364900906317dce7e490602401602060405180830381865af41580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610418919061150d565b11156104be5761042881846105fa565b6040516305f739f960e21b815260048101829052738DDF64Ad32a151A9df1C9Ab726D688E8A2364900906317dce7e490602401602060405180830381865af4158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c919061150d565b6000036104b2576104ad8483610670565b6104be565b6104be848360016108b9565b60018460040160008282546104d39190611626565b909155505050505050565b60008181526003840160205260409081902090516305f739f960e21b815260048101829052738DDF64Ad32a151A9df1C9Ab726D688E8A2364900906317dce7e490602401602060405180830381865af415801561053f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610563919061150d565b60000361057a5761057484836108ea565b50610586565b61058684836001610a9b565b600082815260038501602052604090206105a09084610acc565b60018460040160008282546104d39190611639565b600081815260208390526040902054156105f5576000818152602083905260409020546105e59084908390610391565b6000818152602083905260408120555b505050565b60008181526001808401602052604082205460028501549092859290916106219190611626565b81526020808201929092526040908101600090812054848252868452828220558481526001808701909352908120819055600285018054909190610666908490611626565b9091555050505050565b600061067c8383610b0f565b600081815260018501602052604081206004015491925090819015806106b357506000838152600186016020526040902060050154155b156106bf575081610707565b5060008281526001850160205260409020600501545b6000818152600186016020526040902060040154156107075760009081526001850160205260409020600401546106d5565b60008181526001860160205260409020600401541561073b5760008181526001860160205260409020600401549150610752565b600081815260018601602052604090206005015491505b60008181526001860160205260408082206003908101548584529190922090910181905580156107cc57600081815260018701602052604090206004015482036107b157600081815260018701602052604090206004018390556107d0565b600081815260018701602052604090206005018390556107d0565b8286555b600082815260018701602052604090206006015460ff1615848314610863576107fa878487610b93565b60008581526001880160205260408082206004808201548785528385209182018190558452828420600390810188905560058084015490830181905585529284209092018690556006908101549286905201805460ff191660ff90921615159190911790559193915b8015610873576108738785610c16565b505060009081526001948501602052604081208181559485018190556002850181905560038501819055600485018190556005850155505050600601805460ff19169055565b808360010160006108ca8686610b0f565b815260200190815260200160002060020160008282546106669190611626565b815460009081905b801561094a57600081815260018087016020526040909120015490915081908410156109315760009081526001850160205260409020600401546108f2565b60009081526001850160205260409020600501546108f2565b600185600201600082825461095f9190611639565b925050819055506040518060e00160405280866002015481526020018581526020016001815260200183815260200160008152602001600081526020016001151581525085600101600087600201548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555090505060008203610a2f5760028501548555610a82565b6000828152600180870160205260409091200154841015610a685760028501546000838152600187016020526040902060040155610a82565b600285015460008381526001870160205260409020600501555b610a90858660020154611034565b505050506002015490565b80836001016000610aac8686610b0f565b815260200190815260200160002060020160008282546106669190611639565b6002820180546000908152602084815260408083208590558354858452600180880190935290832081905590929190610b06908490611639565b90915550505050565b81546000905b8015610b895760008181526001808601602052604090912001548303610b3c57905061038b565b6000818152600180860160205260409091200154831015610b70576000908152600184016020526040902060040154610b15565b6000908152600184016020526040902060050154610b15565b5060009392505050565b60008181526001840160205260408082206003908101548584529190922090910181905580610bc457828455610c10565b60008181526001850160205260409020600401548203610bf95760008181526001850160205260409020600401839055610c10565b600081815260018501602052604090206005018390555b50505050565b60005b82548214801590610c3e5750600082815260018401602052604090206006015460ff16155b15611015576000828152600184016020526040808220600301548083529120600401548303610e3d5760008181526001850160205260408082206005015480835291206006015490925060ff1615610ce5576000828152600180860160205260408083206006908101805460ff19908116909155858552919093209092018054909216179055610cce84826112cf565b600081815260018501602052604090206005015491505b600082815260018501602052604080822060040154825290206006015460ff16158015610d2f5750600082815260018501602052604080822060050154825290206006015460ff16155b15610d5c57600082815260018581016020526040909120600601805460ff1916909117905591508161100f565b600082815260018501602052604080822060050154825290206006015460ff16610dda57600082815260018086016020526040808320600481015484529083206006908101805460ff1990811690915593869052018054909216179055610dc384836113af565b600081815260018501602052604090206005015491505b600081815260018501602052604080822060069081018054868552838520808401805460ff909316151560ff199384161790558254821690925560059091015484529190922090910180549091169055610e3484826112cf565b8354925061100f565b60008181526001850160205260408082206004015480835291206006015490925060ff1615610ebb576000828152600180860160205260408083206006908101805460ff19908116909155858552919093209092018054909216179055610ea484826113af565b600081815260018501602052604090206004015491505b600082815260018501602052604080822060050154825290206006015460ff16158015610f055750600082815260018501602052604080822060040154825290206006015460ff16155b15610f3257600082815260018581016020526040909120600601805460ff1916909117905591508161100f565b600082815260018501602052604080822060040154825290206006015460ff16610fb057600082815260018086016020526040808320600581015484529083206006908101805460ff1990811690915593869052018054909216179055610f9984836112cf565b600081815260018501602052604090206004015491505b600081815260018501602052604080822060069081018054868552838520808401805460ff909316151560ff19938416179055825482169092556004909101548452919092209091018054909116905561100a84826113af565b835492505b50610c19565b506000908152600190910160205260409020600601805460ff19169055565b60005b825482148015906110645750600082815260018401602052604080822060030154825290206006015460ff165b156112ad57600082815260018401602052604080822060039081015480845282842090910154835291206004015481036111a25760008181526001850160205260408082206003015482528082206005015480835291206006015490925060ff161561111e576000818152600180860160205260408083206006808201805460ff199081169091558786528386208201805482169055600390920180548652928520018054909116909217909155908290525492506112a7565b600081815260018501602052604090206005015483036111455780925061114584846112cf565b506000828152600180850160205260408083206003908101548085528285206006808201805460ff1990811690915591909301805487529386209092018054909216909317905591819052905461119d9085906113af565b6112a7565b60008181526001850160205260408082206003015482528082206004015480835291206006015490925060ff1615611228576000818152600180860160205260408083206006808201805460ff199081169091558786528386208201805482169055600390920180548652928520018054909116909217909155908290525492506112a7565b6000818152600185016020526040902060040154830361124f5780925061124f84846113af565b506000828152600180850160205260408083206003908101548085528285206006808201805460ff199081169091559190930180548752938620909201805490921690931790559181905290546112a79085906112cf565b50611037565b505080546000908152600190910160205260409020600601805460ff19169055565b6000818152600183016020526040808220600581018054600390920154828552928420600401549385905283905591801561131b57600081815260018601602052604090206003018490555b600083815260018601602052604090206003018290558161133e5782855561138a565b60008281526001860160205260409020600401548403611373576000828152600186016020526040902060040183905561138a565b600082815260018601602052604090206005018390555b5050600081815260019093016020526040808420600401839055918352912060030155565b600081815260018301602052604080822060048101805460039092015482855292842060050154938590528390559180156113fb57600081815260018601602052604090206003018490555b600083815260018601602052604090206003018290558161141e5782855561146a565b60008281526001860160205260409020600501548403611453576000828152600186016020526040902060050183905561146a565b600082815260018601602052604090206004018390555b5050600081815260019093016020526040808420600501839055918352912060030155565b600080600080600060a086880312156114a757600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060008060c087890312156114e357600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60006020828403121561151f57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561154f57600080fd5b825167ffffffffffffffff8082111561156757600080fd5b818501915085601f83011261157b57600080fd5b81518181111561158d5761158d611526565b8060051b604051601f19603f830116810181811085821117156115b2576115b2611526565b6040529182528482019250838101850191888311156115d057600080fd5b938501935b828510156115ee578451845293850193928501926115d5565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561038b5761038b611610565b8082018082111561038b5761038b61161056fea26469706673582212203ed006dbb08bdca99fda26111bc296ef23798d9d4f106cefdbb6a89f502ef55264736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806346dc98fc14610045578063f0f2cef714610067575b600080fd5b81801561005157600080fd5b5061006561006036600461148f565b610087565b005b81801561007357600080fd5b506100656100823660046114ca565b6100ea565b610091848361036c565b156100e357600082815260208490526040902054156100c6576000828152602084905260409020546100c69086908490610391565b6100d18583836104de565b60008281526020849052604090208190555b5050505050565b8015610364576040517fb102d5fa0000000000000000000000000000000000000000000000000000000081526004810187905260649073__$69292ab8e6f98571d324d08d63c6dae4eb$__9063b102d5fa90602401602060405180830381865af415801561015c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610180919061150d565b1061032c576040517fd7b042ca000000000000000000000000000000000000000000000000000000008152600481018790526063602482015260009073__$69292ab8e6f98571d324d08d63c6dae4eb$__9063d7b042ca90604401602060405180830381865af41580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c919061150d565b905080821161022b5750610364565b6040517f4d63fffd00000000000000000000000000000000000000000000000000000000815260048101889052606360248201526000604482018190529073__$69292ab8e6f98571d324d08d63c6dae4eb$__90634d63fffd90606401600060405180830381865af41580156102a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102cd919081019061153c565b6000815181106102df576102df6115fa565b602002602001015190506102fe81838a6103919092919063ffffffff16565b600881901c60009081526020879052604090208054600160ff84161b191690556103298786836105b5565b50505b6103378683836104de565b600882901c60009081526020859052604090208054600160ff85161b179055610364858585856001610087565b505050505050565b600881901c600090815260208390526040902054600160ff83161b1615155b92915050565b600081815260038401602052604080822090516305f739f960e21b81526004810182905290919073__$f445361e8b50888b0b8cee3fd4db50a783$__906317dce7e490602401602060405180830381865af41580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610418919061150d565b11156104be5761042881846105fa565b6040516305f739f960e21b81526004810182905273__$f445361e8b50888b0b8cee3fd4db50a783$__906317dce7e490602401602060405180830381865af4158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c919061150d565b6000036104b2576104ad8483610670565b6104be565b6104be848360016108b9565b60018460040160008282546104d39190611626565b909155505050505050565b60008181526003840160205260409081902090516305f739f960e21b81526004810182905273__$f445361e8b50888b0b8cee3fd4db50a783$",
  "libraries": {
    "SingleRanking": "0x9383DE04C48323c77a82575dFF98D3589D213870",
    "FastArray": "0x8DDF64Ad32a151A9df1C9Ab726D688E8A2364900",
    "RankingRedBlackTree": "0x3cc4F8aF4842c442d3C6a14f39Ac67897318Dd49"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_enterTvlRank(SingleRanking.Data storage,BitMapsUpgradeable.BitMap storage,mapping(uint256 => uint256) storage,uint256,uint256)": {
        "details": "set a new value in tree, only save top x largest value",
        "params": {
          "value": "new value enters in the tree"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}