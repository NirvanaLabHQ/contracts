{
  "address": "0x8B8ea6ca0365B96e02c6c24A25c70c59f5962DaD",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadEngraved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSigner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Dry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Engrave",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "talentPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "PropertyPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IRebornDefination.TALENT",
          "name": "talent",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum IRebornDefination.PROPERTIES",
          "name": "properties",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indulgences",
          "type": "uint256"
        }
      ],
      "name": "Incarnate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Infuse",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NewPricePoint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NewSoupPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "SignerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "details",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "age",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "nothing",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "cost",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "reward",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "dry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "age",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "locate",
          "type": "uint256"
        }
      ],
      "name": "engrave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "findLocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRebornDefination.Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idx",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IRebornDefination.TALENT",
              "name": "talent",
              "type": "uint8"
            },
            {
              "internalType": "enum IRebornDefination.PROPERTIES",
              "name": "properties",
              "type": "uint8"
            }
          ],
          "internalType": "struct IRebornDefination.Innate",
          "name": "innate",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "incarnate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IRebornDefination.TALENT",
              "name": "talent",
              "type": "uint8"
            },
            {
              "internalType": "enum IRebornDefination.PROPERTIES",
              "name": "properties",
              "type": "uint8"
            }
          ],
          "internalType": "struct IRebornDefination.Innate",
          "name": "innate",
          "type": "tuple"
        }
      ],
      "name": "incarnate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "infuse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "initAfterUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract RBT",
          "name": "rebornToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "soupPrice_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceAndPoint_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minScoreInRank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "portfolios",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulativeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IRebornDefination.PROPERTIES",
          "name": "properties",
          "type": "uint8"
        }
      ],
      "name": "propertyPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IRebornDefination.PROPERTIES",
          "name": "properties",
          "type": "uint8"
        }
      ],
      "name": "propertyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ranks",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "readRank",
      "outputs": [
        {
          "internalType": "uint24[]",
          "name": "rank",
          "type": "uint24[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebornToken",
      "outputs": [
        {
          "internalType": "contract RBT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "scores",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pricePoint",
          "type": "uint256"
        }
      ],
      "name": "setPriceAndPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setSoupPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soupPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IRebornDefination.TALENT",
          "name": "talent",
          "type": "uint8"
        }
      ],
      "name": "talentPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IRebornDefination.TALENT",
          "name": "talent",
          "type": "uint8"
        }
      ],
      "name": "talentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "toAdd",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "toRemove",
          "type": "address[]"
        }
      ],
      "name": "updateSigners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe40bc426bd631d38ae1f86a82173bc3df36f3cf6275871c07628281458c03787",
  "receipt": {
    "to": null,
    "from": "0xe0B4c9C36f5A5D0Ff3A547FeaBB6BC9Ba65805F2",
    "contractAddress": "0x8B8ea6ca0365B96e02c6c24A25c70c59f5962DaD",
    "transactionIndex": 3,
    "gasUsed": "4277959",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x83a3fa8c186fb509276b2b92081c78929301d14d57881876d8d550519dd9ba03",
    "transactionHash": "0xe40bc426bd631d38ae1f86a82173bc3df36f3cf6275871c07628281458c03787",
    "logs": [],
    "blockNumber": 27198151,
    "cumulativeGasUsed": "4376323",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 23,
  "solcInputHash": "1ed75503d0c918c757bc37a9d095bb43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadEngraved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSigner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Engrave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"talentPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"PropertyPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IRebornDefination.TALENT\",\"name\":\"talent\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum IRebornDefination.PROPERTIES\",\"name\":\"properties\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indulgences\",\"type\":\"uint256\"}],\"name\":\"Incarnate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Infuse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewPricePoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewSoupPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"SignerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"details\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"age\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"nothing\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"cost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locate\",\"type\":\"uint256\"}],\"name\":\"engrave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findLocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRebornDefination.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idx\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IRebornDefination.TALENT\",\"name\":\"talent\",\"type\":\"uint8\"},{\"internalType\":\"enum IRebornDefination.PROPERTIES\",\"name\":\"properties\",\"type\":\"uint8\"}],\"internalType\":\"struct IRebornDefination.Innate\",\"name\":\"innate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"incarnate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IRebornDefination.TALENT\",\"name\":\"talent\",\"type\":\"uint8\"},{\"internalType\":\"enum IRebornDefination.PROPERTIES\",\"name\":\"properties\",\"type\":\"uint8\"}],\"internalType\":\"struct IRebornDefination.Innate\",\"name\":\"innate\",\"type\":\"tuple\"}],\"name\":\"incarnate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"infuse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initAfterUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract RBT\",\"name\":\"rebornToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"soupPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAndPoint_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minScoreInRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"portfolios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulativeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRebornDefination.PROPERTIES\",\"name\":\"properties\",\"type\":\"uint8\"}],\"name\":\"propertyPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRebornDefination.PROPERTIES\",\"name\":\"properties\",\"type\":\"uint8\"}],\"name\":\"propertyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ranks\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readRank\",\"outputs\":[{\"internalType\":\"uint24[]\",\"name\":\"rank\",\"type\":\"uint24[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebornToken\",\"outputs\":[{\"internalType\":\"contract RBT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePoint\",\"type\":\"uint256\"}],\"name\":\"setPriceAndPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setSoupPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soupPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRebornDefination.TALENT\",\"name\":\"talent\",\"type\":\"uint8\"}],\"name\":\"talentPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IRebornDefination.TALENT\",\"name\":\"talent\",\"type\":\"uint8\"}],\"name\":\"talentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toRemove\",\"type\":\"address[]\"}],\"name\":\"updateSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claimOwnership()\":{\"details\":\"pending owner call this function to claim ownership\"},\"dry(uint256,uint256)\":{\"details\":\"degen get $REBORN back\"},\"engrave(bytes32,address,uint256,uint256,uint256,uint256)\":{\"details\":\"engrave the result on chain and reward\",\"params\":{\"seed\":\"uuid seed string without \\\"-\\\"  in bytes32\"}},\"findLocation(uint256)\":{\"details\":\"find the location in rank given a valueusually executed off-chain\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getPool(uint256)\":{\"details\":\"read pool attribute\"},\"infuse(uint256,uint256)\":{\"details\":\"degen infuse $REBORN to tombstoneexpect for bliss\"},\"initAfterUpgrade(string,string)\":{\"details\":\"warning: only called onece during testabandoned in production\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pendingOwner()\":{\"details\":\"Return the address of the pending owner\"},\"propertyPoint(uint8)\":{\"details\":\"calculate properties point for each property\"},\"propertyPrice(uint8)\":{\"details\":\"calculate properties price in $REBORN for each properties\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setPriceAndPoint(uint256)\":{\"details\":\"set other price\"},\"setSoupPrice(uint256)\":{\"details\":\"set soup price\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"talentPoint(uint8)\":{\"details\":\"calculate talent point for each talent\"},\"talentPrice(uint8)\":{\"details\":\"calculate talent price in $REBORN for each talent\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address,bool)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership\"},\"updateSigners(address[],address[])\":{\"details\":\"update signer\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawAll()\":{\"details\":\"withdraw all $REBORN, only called during development\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"incarnate((uint8,uint8))\":{\"notice\":\"init enter and buy \"},\"incarnate((uint8,uint8),uint256,uint256,bytes32,bytes32,uint8)\":{\"notice\":\"init enter and buy with permit signature \"},\"soupPrice()\":{\"notice\":\"you need buy a soup before reborn \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RebornPortal.sol\":\"RebornPortal\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363736323735393033373339\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20CappedUpgradeable is Initializable, ERC20Upgradeable {\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    function __ERC20Capped_init(uint256 cap_) internal onlyInitializing {\\n        __ERC20Capped_init_unchained(cap_);\\n    }\\n\\n    function __ERC20Capped_init_unchained(uint256 cap_) internal onlyInitializing {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20Upgradeable.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xc707bc7f15de49a0c4da261822a3075d8c171b3c08543fc8f0d0021b8d227b92\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@p12/contracts-lib/contracts/access/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Thanks Yos Riady\\n// Refer to https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol\\n// https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/access/OwnableUpgradeable.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\ncontract SafeOwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT =\\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address owner_) internal onlyInitializing {\\n        __Ownable_init_unchained(owner_);\\n    }\\n\\n    function __Ownable_init_unchained(address owner_)\\n        internal\\n        onlyInitializing\\n    {\\n        _transferOwnership(owner_);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Return the address of the pending owner\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"SafeOwnable: caller not owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     * Note If direct is false, it will set an pending owner and the OwnerShipTransferring\\n     * only happens when the pending owner claim the ownership\\n     */\\n    function transferOwnership(address newOwner, bool direct)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        require(newOwner != address(0), \\\"SafeOwnable: new owner is 0\\\");\\n        if (direct) {\\n            _transferOwnership(newOwner);\\n        } else {\\n            _transferPendingOwnership(newOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev pending owner call this function to claim ownership\\n     */\\n    function claimOwnership() public {\\n        require(msg.sender == _pendingOwner, \\\"SafeOwnable: caller != pending\\\");\\n\\n        _claimOwnership();\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        // compatible with hardhat-deploy, maybe removed later\\n        assembly {\\n            sstore(_ADMIN_SLOT, newOwner)\\n        }\\n\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev set the pending owner address\\n     * Internal function without access restriction.\\n     */\\n    function _transferPendingOwnership(address newOwner) internal virtual {\\n        _pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _claimOwnership() internal virtual {\\n        address oldOwner = _owner;\\n        emit OwnershipTransferred(oldOwner, _pendingOwner);\\n\\n        _owner = _pendingOwner;\\n        _pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xb5c83c6c28c5fc9a97f78b3132ebcf2f5c261a07d5e5e289755d05c185dd8836\",\"license\":\"MIT\"},\"src/RBT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {ERC20CappedUpgradeable, ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol\\\";\\nimport {SafeOwnableUpgradeable} from \\\"@p12/contracts-lib/contracts/access/SafeOwnableUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport {ERC20BurnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\n\\nimport {IRebornToken} from \\\"src/interfaces/IRebornToken.sol\\\";\\nimport {RBTStorage} from \\\"src/RBTStorage.sol\\\";\\n\\ncontract RBT is\\n    ERC20PermitUpgradeable,\\n    ERC20CappedUpgradeable,\\n    SafeOwnableUpgradeable,\\n    UUPSUpgradeable,\\n    IRebornToken,\\n    RBTStorage,\\n    ERC20BurnableUpgradeable\\n{\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 cap_,\\n        address owner_\\n    ) public initializer {\\n        __ERC20_init_unchained(name_, symbol_);\\n        __ERC20Capped_init(cap_);\\n        __ERC20Permit_init(name_);\\n        __Ownable_init(owner_);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyOwner\\n    {}\\n\\n    /**\\n     * @dev allow minter to mint it\\n     */\\n    function mint(address to, uint256 amount) external override onlyMinter {\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev update minters\\n     */\\n    function updateMinter(address[] calldata toAdd, address[] calldata toRemove)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < toAdd.length; i++) {\\n            minters[toAdd[i]] = true;\\n            emit MinterUpdate(toAdd[i], true);\\n        }\\n        for (uint256 i = 0; i < toRemove.length; i++) {\\n            delete minters[toRemove[i]];\\n            emit MinterUpdate(toRemove[i], false);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount)\\n        internal\\n        virtual\\n        override(ERC20CappedUpgradeable, ERC20Upgradeable)\\n    {\\n        require(\\n            ERC20Upgradeable.totalSupply() + amount <= cap(),\\n            \\\"ERC20Capped: cap exceeded\\\"\\n        );\\n        ERC20Upgradeable._mint(account, amount);\\n    }\\n\\n    modifier onlyMinter() {\\n        if (!minters[msg.sender]) {\\n            revert NotMinter();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5d0810822352cedc65d23fb702ac478770597715870ffc0858823e0746567bff\",\"license\":\"GPL-3.0\"},\"src/RBTStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ncontract RBTStorage {\\n    mapping(address => bool) public minters;\\n\\n    /// @dev gap for potential vairable\\n    uint256[49] private _gap;\\n}\\n\",\"keccak256\":\"0x91132462ef644018b92a6d56499fd4dba932eb91ea89aee7f05743916df09b7b\",\"license\":\"GPL-3.0\"},\"src/RebornPortal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IRebornPortal} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {Base64} from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {SafeOwnableUpgradeable} from \\\"@p12/contracts-lib/contracts/access/SafeOwnableUpgradeable.sol\\\";\\n\\nimport {RebornRankReplacer} from \\\"src/RebornRankReplacer.sol\\\";\\nimport {RebornStorage} from \\\"src/RebornStorage.sol\\\";\\nimport {IRebornToken} from \\\"src/interfaces/IRebornToken.sol\\\";\\nimport {RenderEngine} from \\\"src/lib/RenderEngine.sol\\\";\\nimport {RBT} from \\\"src/RBT.sol\\\";\\n\\ncontract RebornPortal is\\n    IRebornPortal,\\n    SafeOwnableUpgradeable,\\n    UUPSUpgradeable,\\n    RebornStorage,\\n    ERC721Upgradeable,\\n    ReentrancyGuardUpgradeable,\\n    RebornRankReplacer\\n{\\n    using SafeERC20Upgradeable for IRebornToken;\\n\\n    function initialize(\\n        RBT rebornToken_,\\n        uint256 soupPrice_,\\n        uint256 priceAndPoint_,\\n        address owner_,\\n        string memory name_,\\n        string memory symbol_\\n    ) public initializer {\\n        rebornToken = rebornToken_;\\n        soupPrice = soupPrice_;\\n        _priceAndPoint = priceAndPoint_;\\n        __Ownable_init(owner_);\\n        __ERC721_init(name_, symbol_);\\n        __ReentrancyGuard_init();\\n        __Rank_init();\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyOwner\\n    {}\\n\\n    function incarnate(Innate memory innate) external payable override {\\n        _incarnate(innate);\\n    }\\n\\n    function incarnate(\\n        Innate memory innate,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external payable override {\\n        _permit(amount, deadline, r, s, v);\\n        _incarnate(innate);\\n    }\\n\\n    /**\\n     * @dev engrave the result on chain and reward\\n     * @param seed uuid seed string without \\\"-\\\"  in bytes32\\n     */\\n    function engrave(\\n        bytes32 seed,\\n        address user,\\n        uint256 reward,\\n        uint256 score,\\n        uint256 age,\\n        // for backward compatibility, do not delete\\n        uint256 locate\\n    ) external override onlySigner {\\n        // enter the rank list\\n        uint256 tokenId = _enter(score);\\n\\n        details[tokenId] = LifeDetail(\\n            seed,\\n            user,\\n            ++rounds[user],\\n            uint16(age),\\n            0,\\n            // set cost to 0 temporary, should implement later\\n            uint128(0 / 10**18),\\n            uint128(reward / 10**18)\\n        );\\n        // mint erc721\\n        _safeMint(user, tokenId);\\n        // mint $REBORN reward\\n        rebornToken.mint(user, reward);\\n\\n        emit Engrave(seed, user, tokenId, score, reward);\\n    }\\n\\n    /**\\n     * @dev degen infuse $REBORN to tombstone\\n     * @dev expect for bliss\\n     */\\n    function infuse(uint256 tokenId, uint256 amount) external override {\\n        _requireMinted(tokenId);\\n\\n        rebornToken.transferFrom(msg.sender, address(this), amount);\\n\\n        Pool storage pool = pools[tokenId];\\n        pool.totalAmount += amount;\\n\\n        Portfolio storage portfolio = portfolios[msg.sender][tokenId];\\n        portfolio.accumulativeAmount += amount;\\n\\n        emit Infuse(msg.sender, tokenId, amount);\\n    }\\n\\n    /**\\n     * @dev degen get $REBORN back\\n     */\\n    function dry(uint256 tokenId, uint256 amount) external override {\\n        Pool storage pool = pools[tokenId];\\n        pool.totalAmount -= amount;\\n\\n        Portfolio storage portfolio = portfolios[msg.sender][tokenId];\\n        portfolio.accumulativeAmount -= amount;\\n\\n        rebornToken.transfer(msg.sender, amount);\\n\\n        emit Dry(msg.sender, tokenId, amount);\\n    }\\n\\n    /**\\n     * @dev set soup price\\n     */\\n    function setSoupPrice(uint256 price) external override onlyOwner {\\n        soupPrice = price;\\n        emit NewSoupPrice(price);\\n    }\\n\\n    /**\\n     * @dev set other price\\n     */\\n    function setPriceAndPoint(uint256 pricePoint) external override onlyOwner {\\n        _priceAndPoint = pricePoint;\\n        emit NewPricePoint(_priceAndPoint);\\n    }\\n\\n    /**\\n     * @dev warning: only called onece during test\\n     * @dev abandoned in production\\n     */\\n    function initAfterUpgrade(string memory name_, string memory symbol_)\\n        external\\n        onlyOwner\\n    {\\n        __ERC721_init(name_, symbol_);\\n        __ReentrancyGuard_init();\\n        __Rank_init();\\n    }\\n\\n    /**\\n     * @dev update signer\\n     */\\n    function updateSigners(\\n        address[] calldata toAdd,\\n        address[] calldata toRemove\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < toAdd.length; i++) {\\n            signers[toAdd[i]] = true;\\n            emit SignerUpdate(toAdd[i], true);\\n        }\\n        for (uint256 i = 0; i < toRemove.length; i++) {\\n            delete signers[toRemove[i]];\\n            emit SignerUpdate(toRemove[i], false);\\n        }\\n    }\\n\\n    /**\\n     * @dev withdraw all $REBORN, only called during development\\n     */\\n    function withdrawAll() external onlyOwner {\\n        rebornToken.transfer(msg.sender, rebornToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        return\\n            Base64.encode(\\n                bytes(\\n                    string.concat(\\n                        '{\\\"name\\\": \\\"',\\n                        name(),\\n                        '\\\",\\\"description\\\":\\\"',\\n                        \\\"\\\",\\n                        '\\\",\\\"image\\\":\\\"',\\n                        \\\"data:image/svg+xml;base64,\\\",\\n                        Base64.encode(\\n                            bytes(\\n                                RenderEngine.render(\\n                                    \\\"seed\\\",\\n                                    scores[tokenId],\\n                                    details[tokenId].round,\\n                                    details[tokenId].age,\\n                                    details[tokenId].creator,\\n                                    details[tokenId].cost,\\n                                    details[tokenId].reward\\n                                )\\n                            )\\n                        ),\\n                        '\\\"}'\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev run erc20 permit to approve\\n     */\\n    function _permit(\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal {\\n        rebornToken.permit(\\n            msg.sender,\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @dev implementation of incarnate\\n     */\\n    function _incarnate(Innate memory innate) internal {\\n        if (msg.value < soupPrice) {\\n            revert InsufficientAmount();\\n        }\\n        // transfer redundant native token back\\n        payable(msg.sender).transfer(msg.value - soupPrice);\\n\\n        // reborn token needed\\n        uint256 rbtAmount = talentPrice(innate.talent) +\\n            propertyPrice(innate.properties);\\n\\n        /// burn token directly\\n        rebornToken.burnFrom(msg.sender, rbtAmount);\\n\\n        emit Incarnate(\\n            msg.sender,\\n            talentPoint(innate.talent),\\n            propertyPoint(innate.properties),\\n            innate.talent,\\n            innate.properties,\\n            rbtAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev calculate talent price in $REBORN for each talent\\n     */\\n    function talentPrice(TALENT talent) public view returns (uint256) {\\n        return\\n            (((_priceAndPoint >> 192) >> (uint8(talent) * 8)) & 0xff) * 1 ether;\\n    }\\n\\n    /**\\n     * @dev calculate talent point for each talent\\n     */\\n    function talentPoint(TALENT talent) public view returns (uint256) {\\n        return ((_priceAndPoint >> 128) >> (uint8(talent) * 8)) & 0xff;\\n    }\\n\\n    /**\\n     * @dev calculate properties price in $REBORN for each properties\\n     */\\n    function propertyPrice(PROPERTIES properties)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (((_priceAndPoint >> 64) >> (uint8(properties) * 8)) & 0xff) *\\n            1 ether;\\n    }\\n\\n    /**\\n     * @dev calculate properties point for each property\\n     */\\n    function propertyPoint(PROPERTIES properties)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return (_priceAndPoint >> (uint8(properties) * 8)) & 0xff;\\n    }\\n\\n    /**\\n     * @dev read pool attribute\\n     */\\n    function getPool(uint256 tokenId) public view returns (Pool memory) {\\n        return pools[tokenId];\\n    }\\n\\n    /**\\n     * @dev only allow signer address can do something\\n     */\\n    modifier onlySigner() {\\n        if (!signers[msg.sender]) {\\n            revert NotSigner();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3947ce223c89ffc3046bdb15a16715872cb03c1299b46aae8dbcb755c162e530\",\"license\":\"GPL-3.0\"},\"src/RebornRankReplacer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"src/lib/RankUpgradeable.sol\\\";\\n\\ncontract RebornRankReplacer is RankUpgradeable {\\n    // rank from small to larger locate start from 1\\n    function _enter(uint256 value) internal virtual returns (uint256) {\\n        scores[++idx] = value;\\n\\n        return idx;\\n    }\\n}\\n\",\"keccak256\":\"0x378bda9ec4b79894f63350d895b326a2430eb6c7f88b59fb1e14c0a90154d6ae\",\"license\":\"GPL-3.0\"},\"src/RebornStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IRebornPortal} from \\\"src/interfaces/IRebornPortal.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {SafeOwnableUpgradeable} from \\\"@p12/contracts-lib/contracts/access/SafeOwnableUpgradeable.sol\\\";\\n\\nimport {IRebornToken} from \\\"src/interfaces/IRebornToken.sol\\\";\\nimport {IRebornDefination} from \\\"src/interfaces/IRebornPortal.sol\\\";\\n\\nimport {RBT} from \\\"src/RBT.sol\\\";\\n\\ncontract RebornStorage is IRebornDefination {\\n    /** you need buy a soup before reborn */\\n    uint256 public soupPrice = 0.01 * 1 ether;\\n\\n    /**\\n     * @dev talent and property price in compact mode\\n     * @dev |   bytes8  |   bytes8  |   bytes8    |   bytes8    |\\n     * @dev |talentPrice|talentPoint|PropertyPrice|PropertyPoint|\\n     * @dev  4 2 0 for talent price   6  4  2  1  0  for property price\\n     * @dev  5 4 3 for talent point   35 30 25 20 15 for property point\\n     */\\n    uint256 internal _priceAndPoint =\\n        0x00000000004020000000000000504030000000604020100000000231e19140f;\\n\\n    RBT public rebornToken;\\n\\n    mapping(address => bool) public signers;\\n\\n    mapping(address => uint16) public rounds;\\n\\n    mapping(uint256 => LifeDetail) public details;\\n\\n    mapping(uint256 => Pool) public pools;\\n\\n    mapping(address => mapping(uint256 => Portfolio)) public portfolios;\\n\\n    /// @dev gap for potential vairable\\n    uint256[42] private _gap;\\n}\\n\",\"keccak256\":\"0x0292bf95b08951c23fbada9992f42ff3f9d1c2e792133e00894970131758657a\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRebornPortal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IRebornDefination {\\n    enum TALENT {\\n        Degen,\\n        Gifted,\\n        Genius\\n    }\\n\\n    enum PROPERTIES {\\n        BASIC,\\n        C,\\n        B,\\n        A,\\n        S\\n    }\\n\\n    struct Innate {\\n        TALENT talent;\\n        PROPERTIES properties;\\n    }\\n\\n    struct LifeDetail {\\n        bytes32 seed;\\n        address creator;\\n        uint16 age;\\n        uint16 round;\\n        uint64 nothing;\\n        uint128 cost;\\n        uint128 reward;\\n    }\\n\\n    struct Pool {\\n        uint256 totalAmount;\\n    }\\n\\n    struct Portfolio {\\n        uint256 accumulativeAmount;\\n    }\\n\\n    event Incarnate(\\n        address indexed user,\\n        uint256 indexed talentPoint,\\n        uint256 indexed PropertyPoint,\\n        TALENT talent,\\n        PROPERTIES properties,\\n        uint256 indulgences\\n    );\\n\\n    event Engrave(\\n        bytes32 indexed seed,\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        uint256 score,\\n        uint256 reward\\n    );\\n\\n    event Infuse(address user, uint256 tokenId, uint256 amount);\\n\\n    event Dry(address user, uint256 tokenId, uint256 amount);\\n\\n    event NewSoupPrice(uint256 price);\\n\\n    event NewPricePoint(uint256 price);\\n\\n    event SignerUpdate(address signer, bool valid);\\n\\n    error InsufficientAmount();\\n    error NotSigner();\\n    error AlreadEngraved();\\n}\\n\\ninterface IRebornPortal is IRebornDefination {\\n    /** init enter and buy */\\n    function incarnate(Innate memory innate) external payable;\\n\\n    /** init enter and buy with permit signature */\\n    function incarnate(\\n        Innate memory innate,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external payable;\\n\\n    /** save data on chain and get reward */\\n    function engrave(\\n        bytes32 seed,\\n        address user,\\n        uint256 reward,\\n        uint256 score,\\n        uint256 age,\\n        uint256 locate\\n    ) external;\\n\\n    /// @dev stake $REBORN on this tombstone\\n    function infuse(uint256 tokenId, uint256 amount) external;\\n\\n    /// @dev unstake $REBORN on this tombstone\\n    function dry(uint256 tokenId, uint256 amount) external;\\n\\n    /** set soup price */\\n    function setSoupPrice(uint256 price) external;\\n\\n    /** set price and point */\\n    function setPriceAndPoint(uint256 price) external;\\n}\\n\",\"keccak256\":\"0x429eedfc849a9a0e33bd6c118f31ab3165807693c116cc887fc77f1b08f5969b\",\"license\":\"GPL-3.0\"},\"src/interfaces/IRebornToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n\\ninterface IRebornTokenDef {\\n    /// @dev caller not minter\\n    error NotMinter();\\n    /// @dev minter update event\\n    event MinterUpdate(address minter, bool valid);\\n}\\n\\ninterface IRebornToken is\\n    IERC20Upgradeable,\\n    IERC20PermitUpgradeable,\\n    IRebornTokenDef\\n{\\n    function mint(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb3446a434bd389213c2e54ffe8e1d285035a76a864f452f601c6b716ce94dd0b\",\"license\":\"GPL-3.0\"},\"src/lib/CompactArray.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.17;\\n\\nlibrary CompactArray {\\n    struct Array {\\n        bytes _data;\\n        uint256 length;\\n    }\\n\\n    function initialize(Array storage array, uint256 length) internal {\\n        array.length = length;\\n        array._data = encodeUint24Array(new uint24[](length));\\n    }\\n\\n    function encodeUint24Array(uint24[] memory values)\\n        public\\n        returns (bytes memory bs)\\n    {\\n        for (uint256 i = 0; i < values.length; i++) {\\n            bs = abi.encodePacked(bs, values[i]);\\n        }\\n    }\\n\\n    function write(Array storage array, uint24[] memory values) internal {\\n        require(values.length == array.length, \\\"length not match\\\");\\n        array._data = encodeUint24Array(values);\\n    }\\n\\n    function readAll(Array memory array)\\n        internal\\n        returns (uint24[] memory values)\\n    {\\n        values = new uint24[](array.length);\\n        for (uint32 i = 0; i < array.length; i++) {\\n            values[i] = read(array, i);\\n        }\\n    }\\n\\n    function readData(Array memory array) internal pure returns (bytes memory) {\\n        return array._data;\\n    }\\n\\n    function read(Array memory array, uint256 index)\\n        internal\\n        returns (uint24 x)\\n    {\\n        bytes memory bs = abi.encodePacked(\\n            array._data[index * 3],\\n            array._data[index * 3 + 1],\\n            array._data[index * 3 + 2]\\n        );\\n        assembly {\\n            x := mload(add(bs, 0x3))\\n        }\\n    }\\n\\n    function set(\\n        Array storage array,\\n        uint256 index,\\n        uint24 value\\n    ) internal {\\n        bytes memory bs = abi.encodePacked(value);\\n        array._data[index * 3] = bs[0];\\n        array._data[index * 3 + 1] = bs[1];\\n        array._data[index * 3 + 2] = bs[2];\\n    }\\n\\n    /**\\n     * @dev convert memory bytes to uint256\\n     */\\n    function sliceUint(bytes memory bs, uint256 start)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n        uint256 x;\\n        assembly {\\n            x := mload(add(bs, add(0x20, start)))\\n        }\\n        return x;\\n    }\\n}\\n\",\"keccak256\":\"0xb7dc8d2cb7050c5d8bd39939f7bb56cba752cd180b5b688d8285394d0ff61252\",\"license\":\"GPL-3.0-only\"},\"src/lib/RankUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {CompactArray} from \\\"src/lib/CompactArray.sol\\\";\\n\\ncontract RankUpgradeable is Initializable {\\n    mapping(uint256 => uint256) public scores;\\n    uint256 placeholder;\\n    using CompactArray for CompactArray.Array;\\n\\n    uint24 public idx;\\n    uint256 public minScoreInRank;\\n\\n    CompactArray.Array public ranks;\\n\\n    uint256[44] private _gap;\\n\\n    uint256 constant RANK_LENGTH = 100;\\n\\n    function __Rank_init() internal onlyInitializing {\\n        ranks.initialize(RANK_LENGTH);\\n    }\\n\\n    // rank from small to larger locate start from 1\\n    function _enter(uint256 value, uint256 locate)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        scores[++idx] = value;\\n        // 0 means no rank and check it is smaller than min in rank\\n        // if (locate == 0 && value <= minScoreInRank) {\\n        //     return idx;\\n        // }\\n\\n        // // decode rank\\n        // // uint24[] memory rank = ranks.readAll();\\n\\n        // if (locate <= RANK_LENGTH) {\\n        //     require(\\n        //         value > scores[ranks.read(locate - 1)],\\n        //         \\\"Large than current not match\\\"\\n        //     );\\n        // }\\n\\n        // if (locate > 1) {\\n        //     require(\\n        //         value <= scores[ranks.read(locate - 2)],\\n        //         \\\"Smaller than last not match\\\"\\n        //     );\\n        // }\\n\\n        // for (uint256 i = RANK_LENGTH; i > locate; i--) {\\n        //     ranks.set(i - 1, ranks.read(i - 2));\\n        //     // rank[i - 1] = rank[i - 2];\\n        // }\\n\\n        // ranks.set(locate - 1, idx);\\n        // // rank[locate - 1] = idx;\\n        // minScoreInRank = scores[ranks.read(RANK_LENGTH - 1)];\\n\\n        // // console.log(\\\"log rank before send rank\\\");\\n        // // _setRank(rank);\\n\\n        return idx;\\n    }\\n\\n    function _setRank(uint24[] memory b) internal {\\n        ranks.write(b);\\n    }\\n\\n    /**\\n     * @dev find the location in rank given a value\\n     * @dev usually executed off-chain\\n     */\\n    function findLocation(uint256 value) public returns (uint256) {\\n        uint24[] memory rank = ranks.readAll();\\n        for (uint256 i = 0; i < RANK_LENGTH; i++) {\\n            // console.log(value);\\n            // console.log(scores[rank[i]]);\\n            if (scores[rank[i]] < value) {\\n                return i + 1;\\n            }\\n        }\\n        // 0 means can not be in rank\\n        return 0;\\n    }\\n\\n    function readRank() public returns (uint24[] memory rank) {\\n        rank = ranks.readAll();\\n    }\\n}\\n\",\"keccak256\":\"0xba6c59b085d87f5d31347b4462cbaacbc099d02c512838b0e6421b080a6c9008\",\"license\":\"GPL-3.0\"},\"src/lib/RenderEngine.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary RenderEngine {\\n    function _shortenAddr(address addr) private pure returns (string memory) {\\n        uint256 value = uint160(addr);\\n        bytes memory allBytes = bytes(Strings.toHexString(value, 20));\\n\\n        string memory newString = string(allBytes);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _substring(newString, 0, 6),\\n                    unicode\\\"\\u2026\\\",\\n                    _substring(newString, 38, 42)\\n                )\\n            );\\n    }\\n\\n    function _substring(\\n        string memory str,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) private pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    string constant P1 =\\n        '<svg width=\\\"1060\\\" height=\\\"600\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M1058 2v596H2V81.829L81.865 2H1058z\\\" fill=\\\"url(#prefix__paint0)\\\" stroke=\\\"url(#prefix__paint1)\\\" stroke-width=\\\"4\\\"/><path d=\\\"M1056 10H74v2h982v-2zM66 18h990v2H66v-2zM4 146h1052v2H4v-2zM1056 50H34v2h1022v-2zM5.996 178H1056v2H5.996v-2zM1056 82H4v2h1052v-2zM5.996 282H1056v2H5.996v-2zM1056 210H5.996v2H1056v-2zM4 114h1052v2H4v-2zM1056 242H5.996v2H1056v-2zM50 34h1006v2H50v-2zM1056 162H5.996v2H1056v-2zM18 66h1038v2H18v-2zM1056 266H5.996v2H1056v-2zM5.996 194H1056v2H5.996v-2zM1056 98H4v2h1052v-2zM5.996 226H1056v2H5.996v-2zM1056 130H4v2h1052v-2zM5.996 258H1056v2H5.996v-2zM4 138h1052v2H4v-2zM1056 42H42v2h1014v-2zM5.996 170H1056v2H5.996v-2zM1056 74H10v2h1046v-2zM5.996 274H1056v2H5.996v-2zM1056 202H5.996v2H1056v-2zM4 106h1052v2H4v-2zM1056 234H5.996v2H1056v-2zM58 26h998v2H58v-2zM1056 154H5.996v2H1056v-2zM26 58h1030v2H26v-2zM1056 186H5.996v2H1056v-2zM4 90h1052v2H4v-2zM1056 290H5.996v2H1056v-2zM5.996 218H1056v2H5.996v-2zM1056 122H4v2h1052v-2zM5.996 250H1056v2H5.996v-2zM4 298h1052v2H4v-2zM1056 306H4v2h1052v-2zM1056 434H4v2h1052v-2zM4 338h1052v2H4v-2zM1056 466H5.996v2H1056v-2zM4 370h1052v2H4v-2zM5.996 498H1056v2H5.996v-2zM1056 402H4v2h1052v-2zM5.996 530H1056v2H5.996v-2zM1056 322H4v2h1052v-2zM5.996 450H1056v2H5.996v-2zM1056 354H4v2h1052v-2zM5.996 554H1056v2H5.996v-2zM1056 482H5.996v2H1056v-2zM4 386h1052v2H4v-2zM1056 514H5.996v2H1056v-2zM4 418h1052v2H4v-2zM1056 546H5.996v2H1056v-2zM1056 426H4v2h1052v-2zM4 330h1052v2H4v-2zM1056 458H5.996v2H1056v-2zM4 362h1052v2H4v-2zM1056 562H5.996v2H1056v-2zM5.996 490H1056v2H5.996v-2zM1056 394H4v2h1052v-2zM5.996 522H1056v2H5.996v-2zM1056 314H4v2h1052v-2zM5.996 442H1056v2H5.996v-2zM1056 346H4v2h1052v-2zM5.996 474H1056v2H5.996v-2zM1056 378H4v2h1052v-2zM5.996 578H1056v2H5.996v-2zM1056 586H5.996v2H1056v-2zM5.996 506H1056v2H5.996v-2zM1056 410H4v2h1052v-2zM5.996 538H1056v2H5.996v-2z\\\" fill=\\\"url(#prefix__paint2)\\\"/><path d=\\\"M1060 10V0H81L0 81v14.47L85.47 10H1060z\\\" fill=\\\"#F98701\\\"/><text dx=\\\"533\\\" dy=\\\"521\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" style=\\\"height:100px\\\" font-family=\\\"VT323\\\" font-size=\\\"56\\\" fill=\\\"#FF8A01\\\">Seed: ';\\n    string constant P2 =\\n        '</text><text dx=\\\"204\\\" dy=\\\"252\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" font-family=\\\"Black Ops One\\\" font-weight=\\\"400\\\" font-size=\\\"48\\\" fill=\\\"#FF8A01\\\">LifeScore</text><text dx=\\\"180\\\" dy=\\\"144\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" font-family=\\\"Black Ops One\\\" font-weight=\\\"400\\\" font-size=\\\"168\\\" fill=\\\"#FF8A01\\\">';\\n    string constant P3 =\\n        '</text><text dx=\\\"570\\\" dy=\\\"385\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"left\\\" font-family=\\\"VT323\\\" font-weight=\\\"100\\\" font-size=\\\"72\\\" fill=\\\"#65E250\\\">Re:';\\n    string constant P4 =\\n        '</text><text dx=\\\"803\\\" dy=\\\"385\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"left\\\" font-family=\\\"VT323\\\" font-weight=\\\"400\\\" font-size=\\\"72\\\" fill=\\\"#65E250\\\">Age:';\\n    string constant P5 =\\n        '</text><text dx=\\\"327\\\" dy=\\\"384\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" font-family=\\\"VT323\\\" textLength=\\\"315\\\" font-weight=\\\"400\\\" font-size=\\\"72\\\" fill=\\\"#FFF\\\">';\\n    string constant P6 =\\n        '</text><rect x=\\\"64\\\" y=\\\"344\\\" width=\\\"80\\\" height=\\\"80\\\" rx=\\\"40\\\" fill=\\\"url(#prefix__pattern0)\\\"/><text dx=\\\"710\\\" dy=\\\"85\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" style=\\\"height:100px\\\" font-family=\\\"Black Ops One\\\" font-size=\\\"48\\\" fill=\\\"#FF8A01\\\">Degen</text><text dx=\\\"908\\\" dy=\\\"85\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"middle\\\" style=\\\"height:100px\\\" font-family=\\\"Black Ops One\\\" font-size=\\\"48\\\" fill=\\\"#FF8A01\\\">Reborn</text><text dx=\\\"755\\\" dy=\\\"169\\\" dominant-baseline=\\\"central\\\" text-anchor=\\\"end\\\" font-family=\\\"VT323\\\" font-weight=\\\"500\\\" font-size=\\\"80\\\" fill=\\\"#FF4040\\\">-';\\n    string constant P7 =\\n        '</text><text dx=\\\"765\\\" dy=\\\"169\\\" dominant-baseline=\\\"central\\\" font-family=\\\"VT323\\\" font-weight=\\\"500\\\" font-size=\\\"80\\\" fill=\\\"#65E250\\\">+';\\n    string constant P8 =\\n        '</text><path fill=\\\"#FFD058\\\" d=\\\"M949 148v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M969 148v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M989 148v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M939 148v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M959 148v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M979 148v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M999 148v5h-5v-5zM934 148v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M954 148v5h-5v-5z\\\"/><path fill=\\\"#C04A07\\\" d=\\\"M974 148v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M994 148v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M944 148v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M964 148v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M984 148v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M949 138v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M969 138v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M989 138v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M959 138v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M979 138v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M954 138v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M974 138v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M944 138v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M964 138v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M984 138v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M954 128h5v5h-5zM929 158v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M949 158v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M969 158v5h-5v-5zM989 158v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M939 158v5h-5v-5z\\\"/><path fill=\\\"#C04A07\\\" d=\\\"M959 158v5h-5v-5zM979 158v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M999 158v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M934 158v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M954 158v5h-5v-5zM974 158v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M994 158v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M944 158v5h-5v-5zM964 158v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M984 158v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M1004 158v5h-5v-5zM949 133v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M969 133v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M959 133v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M979 133v5h-5v-5zM954 133v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M974 133v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M964 133v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M984 133v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M949 153v5h-5v-5z\\\"/><path fill=\\\"#F8C056\\\" d=\\\"M969 153v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M989 153v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M939 153v5h-5v-5z\\\"/><path fill=\\\"#C04A07\\\" d=\\\"M959 153v5h-5v-5zM979 153v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M999 153v5h-5v-5zM934 153v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M954 153v5h-5v-5zM974 153v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M994 153v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M944 153v5h-5v-5zM964 153v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M984 153v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M949 143v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M969 143v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M989 143v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M939 143v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M959 143v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M979 143v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M954 143v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M974 143v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M994 143v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M944 143v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M964 143v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M984 143v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M959 128h5v5h-5zM929 163v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M949 163v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M969 163v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M989 163v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M939 163v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M959 163v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M979 163v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M999 163v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M934 163v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M954 163v5h-5v-5z\\\"/><path fill=\\\"#C04A07\\\" d=\\\"M974 163v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M994 163v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M944 163v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M964 163v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M984 163v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M1004 163v5h-5v-5zM964 128h5v5h-5zM929 168v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M949 168v5h-5v-5z\\\"/><path fill=\\\"#F8C056\\\" d=\\\"M969 168v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M989 168v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M939 168v5h-5v-5z\\\"/><path fill=\\\"#C04A07\\\" d=\\\"M959 168v5h-5v-5zM979 168v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M999 168v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M934 168v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M954 168v5h-5v-5zM974 168v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M994 168v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M944 168v5h-5v-5zM964 168v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M984 168v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M1004 168v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M949 188v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M969 188v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M989 188v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M939 188v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M959 188v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M979 188v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M954 188v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M974 188v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M994 188v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M944 188v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M964 188v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M984 188v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M949 178v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M969 178v5h-5v-5zM989 178v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M939 178v5h-5v-5z\\\"/><path fill=\\\"#C04A07\\\" d=\\\"M959 178v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M979 178v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M999 178v5h-5v-5zM934 178v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M954 178v5h-5v-5z\\\"/><path fill=\\\"#F8C056\\\" d=\\\"M974 178v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M994 178v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M944 178v5h-5v-5zM964 178v5h-5v-5z\\\"/><path fill=\\\"#C04A07\\\" d=\\\"M984 178v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M949 198v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M969 198v5h-5v-5z\\\"/><path fill=\\\"#FFE6A6\\\" d=\\\"M959 198v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M979 198v5h-5v-5zM954 198v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M974 198v5h-5v-5z\\\"/><path fill=\\\"#FFE6A6\\\" d=\\\"M964 198v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M984 198v5h-5v-5zM969 128h5v5h-5zM929 173v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M949 173v5h-5v-5z\\\"/><path fill=\\\"#F8C056\\\" d=\\\"M969 173v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M989 173v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M939 173v5h-5v-5z\\\"/><path fill=\\\"#C04A07\\\" d=\\\"M959 173v5h-5v-5zM979 173v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M999 173v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M934 173v5h-5v-5z\\\"/><path fill=\\\"#E86609\\\" d=\\\"M954 173v5h-5v-5zM974 173v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M994 173v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M944 173v5h-5v-5zM964 173v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M984 173v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M1004 173v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M949 193v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M969 193v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M989 193v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M959 193v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M979 193v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M954 193v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M974 193v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M944 193v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M964 193v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M984 193v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M949 183v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M969 183v5h-5v-5zM989 183v5h-5v-5z\\\"/><path fill=\\\"#fff\\\" d=\\\"M939 183v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M959 183v5h-5v-5z\\\"/><path fill=\\\"#F8C056\\\" d=\\\"M979 183v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M999 183v5h-5v-5zM934 183v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M954 183v5h-5v-5z\\\"/><path fill=\\\"#F8C156\\\" d=\\\"M974 183v5h-5v-5z\\\"/><path fill=\\\"#F29914\\\" d=\\\"M994 183v5h-5v-5z\\\"/><path fill=\\\"#FFD058\\\" d=\\\"M944 183v5h-5v-5zM964 183v5h-5v-5z\\\"/><path fill=\\\"#F8C056\\\" d=\\\"M984 183v5h-5v-5z\\\"/><path fill=\\\"#000\\\" d=\\\"M969 203v5h-5v-5zM959 203v5h-5v-5zM974 203v5h-5v-5zM964 203v5h-5v-5z\\\"/><defs><linearGradient id=\\\"prefix__paint0\\\" x1=\\\"530.037\\\" y1=\\\"-2\\\" x2=\\\"530.037\\\" y2=\\\"578\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#452F16\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1B2023\\\"/></linearGradient><linearGradient id=\\\"prefix__paint1\\\" x1=\\\"530.037\\\" y1=\\\"-2\\\" x2=\\\"530.037\\\" y2=\\\"570\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#FF8A00\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#52391B\\\"/></linearGradient><linearGradient id=\\\"prefix__paint2\\\" x1=\\\"530.998\\\" y1=\\\"0\\\" x2=\\\"530.998\\\" y2=\\\"298\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#F78602\\\" stop-opacity=\\\".35\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#F78602\\\" stop-opacity=\\\"0\\\"/></linearGradient><style>@font-face{font-family:&quot;VT323&quot;;font-style:normal;font-weight:400;src:url(data:application/font;base64,d09GMgABAAAAAAj0AA0AAAAAK6wAAAidAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP0ZGVE0cGhgGYACDIhEICsgIuEULXAABNgIkA2IEIAWFTQd8G6ciUZRNTiqKKkkURWmSNOJngonXmbJKSIqE60abGym5Ea1HfeZ71AvHcYzEc+GB3qm+k+TAOWCOSg6QAmoUtR2qVRGuyC46A9aQPWR/DuEP2F8FxBH7+L13qXnVnOPP+2OKKiWJZLIYIA5ujyjzQCWVuPzvt/5rv5UXZhMeycyGSGcIhaF5Kv/hD5emmlmSSaQkQoa7aNWSWL5QrsUrJZ7fuzTxzV3SKfIzJZF2/d/T2h5kX3pleXw1Iym34/W1ilI64RXDDGMXPcCXmHqS3XZLfhwHEL/0wYAA2NV/4Udg85N/C2D/53WOACqACNAAw4XF4+ZKQqA9pE0AE2BDLOLToEKonGBCacQ7zpxxC35gd4tO/iIYET8S4ikA8bjmAXUEoEvsW0AFL6PgKoM7MjER/lAN2yWG6bvW7m5pSBSLYHMM0/OOpVyZbIjfIlus87kPboaedge7S7CQdLIjSpqRENpA4aA+Ma6DESopvbsK5DGqCUaRKGOxeCKZqtko+/fUNzQ2Nbe0Wm3tHQSDdFIQRT0vtsk87TFQeS9U/jJfNmAKBiJCbYR6dSjWUBQICTZZws0gcmNowP2k7OyUQybPWtjkyf4to4bHYi39ZfqAGYkFsVkjB1ty9BC3Ww5f43VKW/qZwR2d4ZlueuWKEe5Qu1MF83oSMi6lXPUMd5jyRXFnzW5bDj/DjqJwLnTtGG4CBdfJduDiZsV1NxXAwpaaMGLwMP7C8M9qcjQ3SISPP91QFMaKy3atud1jSuzrMfg4G1EZltgtVkUYrx0GTkQfQ0kZxRyyBW48w+5UtThXsrrxDFuzkxXyUPpu1DbneDSwFMzfpS5ZDgP4psKYWG8kl6t0nECiO2m6RTxo0d1ywt1ga50Z7vvjDt2TE6HZTRhhnXYXd5w2Dl+VuKJwUmxJsD7mbc5vhZ6xXNWuHE+JNzX2xGgGtHcZe/nD6ZbsQkPyBONYgRhdCyXBOP7zyvblpMoCGZ68nTojxVpRYC43BEjS1W6pR+GFx4slaKRNVsXe4rcckZDEeejQGS7hVS22oCJdL1kqY3314qHfy6npEUb5j/FKBUa/rWRKTPD8M9OdBNkzQYsS42UbRmGuZU7BHBCmFb0SaHO+rqR+qX2Rs3smS23FxoAF3ZQfDqVZN4d7dhEYQZ6BoxaDiGUhZ0b65S8R6muatd95BhrHi15+xYACdeCllmQPZbl4+f9UdRBlSlhY25VLnzh6bq/YMmXP48slBSoLgOQqrjLUTuNY0SbVQOKl//KxEoMvvcykGkkdo4TdMKpqQBBi3b1ji1lbjIoU2zBbCO3DPzt836xxCk6N6fPfj05mf5HxzeU3lCA3pKFr+BxcogjMPnusz9M+YdRxa9L4oThEqBnsBiP87PAjiqlo2INBPdTLK8Vs5fBuQXq2MQdVmt9CDsm3YLVQuI6tH8eSrVM45gI+qWnAjDPQbU0gVQLrq9n3geX32qaAsBSaHRjFzNnhLcs3eUxR0OURCFWX8ef92e5PnbSl+GNRyTPuEsRLGS5vI5HeMPBHJydCeDg6hlCspG+5vIl08jgwGo6nOT3WZ/9IpkMMqjcqfGf6JpOiAsecvwg7+sY82Xx2SsYRm5MZ/dEzPmFuPaScJ+fMCUdRUFPMNl5IKCmCXTDdk/+Kfo7xXf7LjwiRptYfTp9Cdklo2flgw0icuHBCUkpM0h/wnF/3AN4F72MZVk1xBiyDr5NAY7obLA1Pgh3jSFJvhhNk9+figB/P51s5imP+ka6rzFJl5i5k85UCDtiyBSlPOf74geS7y82Pne5tad5VhIDzXyIyxqOS6gTYsz/u7z9xalj1WmUClKuPyA5peDbZ9XU1NdNihd6/9VEnk6HVGb58a/WJW09ukWWMsAnSm30KBNDB52JzV426hf+Y/LG0giEQAgLkPOkNsl1M8QdcbwQPMDbu0pbmDRX44DvOzYoGMpcIlH2fv5/OuKtk3eO1/Rx2mf7alJo+eRxT/EC8m74YQYsbW1kbX5ySJ1sNN89TG8DwstJQgvTOrBmwD5mbLHRM3v4T1zcvS6EP9CauIv1fcxq5PO96g6tUdn58fLHRvvlXPLjFhpme+PCQJzzf1qe3fi+mdVUtOu+nShnXSouppYJCpySoMlp81cqbqQaLIf9YByqu3dFuYK+g2F5UUcY3evZxmtlLxmz2zA6uDcg3exZaMJpTcRd/yhwDewHGWWEHJe87XljiZFyblk++7XPjZ9VdJp2RzQ4sBsT5yUgwMFS02BaCY4odT/a4LfJOg4WiEtBAjk1UaDemr1Rs9xpDNLIWuVqyCxVT4YNcLUtYzx8nYN6hiyVMtIJ6MmWlo3DCDfWhaxrtWIEbLLCoIMgRzpn+bzE1WLjv3hdXe1cW1k+cjf51718iesoBZWg1VueRryFXxO459zo2SrqKfAL3LpHTEGHeJkgGeIfzY09qQoGJUNTgS85elIO9Cwit1djuZhzWCBUivu+4wlC3XCYIsZ5plHKU6ZixMINKMYOE6G2khL5+cxW986cjjHLgDuQygeQbplHFVqbjOOs1aqcRbwjSHSmhj59RxcB8GQEJTBLK2YWCcDm6detUZ4aLI2KWAT/XAHUUCaId7Wv5W8OoFBdIIiMsVzpSHElcVlOxWBmIwkAUl+UQx4qrFYQHffPfctieNfC7A66Fcz59Aq3XSZ5ZrbJsBikGqQs0dq10HVJvBqZBPLe5tSWBlzZlAFyOTvTbS81UN9YSb8RCu2af+6WMwuUNGG96yG7aRH1666Bi3To8DprTFMQj3RHgilFo08p0y5QOgFF1WSGI6dLlGvtRmBEouSqXa3Is1yi57sxtipIGuDrP+b8SuWso9jqb0pRSYwpXF+/hTp3jvgtsINCIiEtISqlh6qW3Pvrqp8kgFxipqKSsoqqmDl6iqaWto6unb2BoZGxiamZuYekNAAAA) format(&apos;woff2&apos;)}</style><style>@font-face{font-family:&apos;Black Ops One&apos;;src:url(data:application/font;base64,d09GMgABAAAAAAeMAA0AAAAAEAAAAAc2AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP0ZGVE0cGhgGYACDWBEICo5oiWMLOgABNgIkA3AEIAWHQwdaG10MUVSROgB+HthuUzp0aIQtVLU7iX8hYbAgcjtCklmj+E1/n5G7iJFUkJlXI2ZCahaF+ORBTUlFndQcqka/qJA6SY3n39/YeY9/ARpjjOBm1GhprrtZqyE0439xLZukdE1zfZBudvaJdzDkDlCJabn/W2t1dxFNJInc+3gnZCKlEtKK/RvMZgczD5FQPcTzhCeXELmIZDIlUVJGnUx6rE4A7Useupmcs6GtemIADAB8rd3cDQDfPzu1BAB+OHvoVzAAXAF4AlgAfNpVGMqsggAIUbwNwJZsJ9aGi0wXUhrMAfx2wM+03yzgGoJ0LGVvywBygT0pAmsBgNcIYQBEDAAOAAdAhQEAfAwODAAVHucA9OOJA0GIBNmKael19DeiszhkoM97ECR8qq1StdYo34Hyke8/e3jrKol7+/jhJYBBP4j1MVCFRq4m7nnI+QB89dFXg2+iPwUAUCpSMTKAQWYYFgCLdAwmceABQeb0TFYIIj0Q7imj14F/JPITvldf9AOg/w1QypIx7zXCVbzHAxKBuQWk4W8uaA0T4c8jT3pfEK7E8VoxXMeovXear0TinHcWg9Tobte5rtbaCgrdY9p4H7YwrLnQ2usQtB/m/PTc1uOmHVXNoK4uKIIQo6iIc+iqRFJwbauyca1g9K0JME72krrI1CbDNVYlPkMrKqonSKprIsikvMHwyMDh6R4bECWYsljGoJ5HWU8Y16aPHTzi2BMjFY+ILAzY4RkCSa0eSSQUt3WUadzHUj1meUSKfcGIGoqsshgc5QXIEk2VXtsldiPqbXXdIFuClZi+jInExcmtnSxP3M0jfvPwJgTqgYNpnF0a7VLJl0j22proCGkozIgiLAD2hyeudSWNadmfKE1vgU0bj/OBolfrJSQ1qCyGA19OyXPGegRJUYnRbFkNsvfGx0J81/GnQ9vrpU+2gmlWcvNJHHmXf0I4ZzLEv4Ow+6sPlYO9/9j4xLjEA+bEujpm38FYj0naZ44/OSZDSe7cad+5/cn2rfatO3HxuV2yo3Er0pwkRE1IN1VKyevZEdH4/vE703yT/K8NOdRA0fxXUJcCJOYfv/pMuXf2QUo+t2uu8zWz7T/acSI8+o/oficpEbaZti1wo05pa7WfENKjyL/hItcSYrNY85XoJYSZpQ3chouZH17UvQiUNG7dLk84NH6+O0LVn+6sqBzlcCE0jpDPKVlvXR9KMUmrtxhOD6oPUvf5tyfuoVpCJg65eZuejhvjYLinyYSAyxpTOs/kT3sfkNNjlJ/8fKi//Gfq+/bZMW/HXJ6SZnrN+ZrjmvIazaU2pc1hc7ZRHSHsdtN2kzdxggc9oD5Ah7vhnHY7pcGUDKX7g4uce+2UjLSM3E9h3PLV+bRHo5YeCGGWXAzjgOtc+s2h1Sdh+DHFG4sRfayw2Xrvf2ldvnU5+t9kfpJKaRAlG76oBs0hxGWQtbPaLv/t9+XpnPV70mnZkd8NHcFqgWDNddwZcmfB3HlPKfGhBLqV+BByUkNn7rxFjYTsnDnTcavTYiCT7znHfPEvy190MiHSbLOjUppvwkq1nuq3O7/qpumn+Cg1S3oplkmmzmqlmVP7AuLcJLG4fOgt4/x5kK3rUlgVyjNdGqsGwfcrhrXrXv7/f9xszRWNLPcBVBoiOXIdrUNaqf/YkdA9LRpWwV4i/G7Xz1/JAQBgADCMrMJbcX28R/IL4kKwifXt9m6ZbIlwCwABS6luHLs5hQAAYg0waKFqe3d7AIDtAoSdsPB/wCJ8g+axEiuEC2jOF9ClHW7C12iCRJEjehaU4d6PYRw9MPafMrcxMTnQJQjjE4Xx01JokozxvRz6FCvX0DD+hW7T+wEDcQAAFq1Unu6AQcVIZ4aBgRsTCCycmHzgoK5lwMO3PgcBgZ0JMsh7/d7uUPZP4MDwFMApIAMGinIHFu5MPHBIrHLgEVhdIKCq/gUZNN1yMnfEthlZ2rSbqoNeAx0DUaTwLAUVVU35OixHYCsS2yqmVUNB2gHLe9qmEUlqxtEMxhp1c9pBUuLPFw0Md5JEYcI00GP1NKoWqkbbWoTRUpEmWbTKVA7WhftMzSaq0SREGZ+qALjLWz7VOfP/VvqV61untrXuweqnCbQbc1f4/25znwa9QWes3m01tUurSd+6t0rC7grfMaSsXQqAzEBR6W9rVQeovChmd611QKU6DYw0FR3w6sufBSKEChcuWhKtKlmSOCugwaohfNxEvMLDo5O0VVlJ8iSXPDuE+7z1W1XkNlPfXLFgw9RFhuhjuVIsiRgpVm9iDLHttum1MpBJ2Bif+ejEcULEqJWsIgBO7KkW1IoGQ/2BQXedvtUg+k9afCvxodGhcSExtTHVAXDGnC6YfVZaLs2KTBJqGmsWWvhqEKZMrmKIv/YjukzSNx9AVZXlFi/Y675PdBEtdyoAAxbu8NwbVkADVCKO7ydMjFg5cuUrUKhYhUpDAQAA) format(&apos;woff2&apos;)}</style></defs></svg>';\\n\\n    function render(\\n        string calldata seed,\\n        uint256 lifeScore,\\n        uint256 round,\\n        uint256 age,\\n        address addr,\\n        uint256 pay,\\n        uint256 reward\\n    ) public pure returns (string memory) {\\n        string memory Part1 = _renderPart1(seed, lifeScore, round, age);\\n        string memory Part2 = _renderPart2(addr, pay, reward);\\n        return string(abi.encodePacked(Part1, Part2));\\n    }\\n\\n    function _renderPart1(\\n        string calldata seed,\\n        uint256 lifeScore,\\n        uint256 round,\\n        uint256 age\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    P1,\\n                    seed,\\n                    P2,\\n                    Strings.toString(lifeScore),\\n                    P3,\\n                    Strings.toString(round),\\n                    P4,\\n                    Strings.toString(age)\\n                )\\n            );\\n    }\\n\\n    function _renderPart2(\\n        address addr,\\n        uint256 pay,\\n        uint256 reward\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    P5,\\n                    _shortenAddr(addr),\\n                    P6,\\n                    Strings.toString(pay),\\n                    P7,\\n                    Strings.toString(reward),\\n                    P8\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x8e3686195c6fa4e0895a01811a0eda8415f25c56a9199e45324381982aa916a4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405230608052662386f26fc1000060c9557a04020000000000000504030000000604020100000000231e19140f60ca5534801561003e57600080fd5b50608051614c0361007660003960008181611546015281816115dc01528181611762015281816117f801526118ef0152614c036000f3fe6080604052600436106103295760003560e01c8063736c0d5b116101a5578063ac4afa38116100ec578063c87b56dd11610095578063e4421be21161006f578063e4421be214610a80578063e4e3b32b14610aa0578063e985e9c514610ac0578063f11925d714610b0a57600080fd5b8063c87b56dd14610a2f578063dbcd0a5814610a4f578063e30c397814610a6257600080fd5b8063b88d4fde116100c6578063b88d4fde146109d6578063c208d41a146109f6578063c546286514610a0d57600080fd5b8063ac4afa3814610951578063b242e5341461097e578063b470a9b51461099e57600080fd5b8063853828b61161014e57806395d89b411161012857806395d89b41146107e4578063a005ec7a146107f9578063a22cb4651461093157600080fd5b8063853828b61461079e578063869bdf67146107b35780638da5cb5b146107c657600080fd5b80637cad554d1161017f5780637cad554d1461073e57806380619b611461075e578063829a1d091461077e57600080fd5b8063736c0d5b146106ba5780637447aa08146106ea578063795dbede1461070d57600080fd5b8063314b8dbd1161027457806352d1902d1161021d5780636352211e116101f75780636352211e1461064f578063670506e91461066f57806370a0823114610685578063715018a6146106a557600080fd5b806352d1902d146105d657806356fc2fa6146105eb57806360b127eb1461060b57600080fd5b806342842e0e1161024e57806342842e0e1461058e5780634e71e0c8146105ae5780634f1ef286146105c357600080fd5b8063314b8dbd1461052e578063350b23691461054e5780633659cfe61461056e57600080fd5b806316a065c6116102d65780631dae2436116102b05780631dae2436146104c057806323b872dd146104e05780632ee691a31461050057600080fd5b806316a065c614610452578063171d49521461047257806318ac12541461049257600080fd5b8063081812fc11610307578063081812fc146103d8578063095ea7b3146104105780630aeb55c81461043257600080fd5b806301ffc9a71461032e578063068bcd8d1461036357806306fdde03146103b6575b600080fd5b34801561033a57600080fd5b5061034e610349366004613f7c565b610b2a565b60405190151581526020015b60405180910390f35b34801561036f57600080fd5b506103a761037e366004613f99565b604080516020808201835260009182905292815260cf8352819020815192830190915254815290565b6040519051815260200161035a565b3480156103c257600080fd5b506103cb610c0f565b60405161035a9190614002565b3480156103e457600080fd5b506103f86103f3366004613f99565b610ca2565b6040516001600160a01b03909116815260200161035a565b34801561041c57600080fd5b5061043061042b36600461402a565b610cca565b005b34801561043e57600080fd5b5061043061044d366004614056565b610e1f565b34801561045e57600080fd5b5060cb546103f8906001600160a01b031681565b34801561047e57600080fd5b5061043061048d36600461416b565b611125565b34801561049e57600080fd5b506104b26104ad3660046141e3565b61119d565b60405190815260200161035a565b3480156104cc57600080fd5b506104306104db366004613f99565b6111de565b3480156104ec57600080fd5b506104306104fb3660046141fe565b611274565b34801561050c57600080fd5b506104b261051b366004613f99565b6101916020526000908152604090205481565b34801561053a57600080fd5b506104b26105493660046141e3565b6112fb565b34801561055a57600080fd5b5061043061056936600461428b565b61132d565b34801561057a57600080fd5b506104306105893660046142f7565b61153c565b34801561059a57600080fd5b506104306105a93660046141fe565b6116d9565b3480156105ba57600080fd5b506104306116f4565b6104306105d1366004614314565b611758565b3480156105e257600080fd5b506104b26118e2565b3480156105f757600080fd5b506104b2610606366004614369565b6119a7565b34801561061757600080fd5b5061063c6106263660046142f7565b60cd6020526000908152604090205461ffff1681565b60405161ffff909116815260200161035a565b34801561065b57600080fd5b506103f861066a366004613f99565b6119e8565b34801561067b57600080fd5b506104b260c95481565b34801561069157600080fd5b506104b26106a03660046142f7565b611a4e565b3480156106b157600080fd5b50610430611ae9565b3480156106c657600080fd5b5061034e6106d53660046142f7565b60cc6020526000908152604090205460ff1681565b3480156106f657600080fd5b506106ff611b4d565b60405161035a929190614384565b34801561071957600080fd5b506101935461072a9062ffffff1681565b60405162ffffff909116815260200161035a565b34801561074a57600080fd5b506104b2610759366004614369565b611be6565b34801561076a57600080fd5b506104306107793660046143a6565b611c15565b34801561078a57600080fd5b50610430610799366004614441565b611d88565b3480156107aa57600080fd5b50610430611eb9565b6104306107c13660046144c1565b612029565b3480156107d257600080fd5b506033546001600160a01b03166103f8565b3480156107f057600080fd5b506103cb612047565b34801561080557600080fd5b506108ce610814366004613f99565b60ce6020526000908152604090208054600182015460029092015490916001600160a01b0381169174010000000000000000000000000000000000000000820461ffff90811692760100000000000000000000000000000000000000000000810490911691780100000000000000000000000000000000000000000000000090910467ffffffffffffffff16906fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041687565b604080519788526001600160a01b03909616602088015261ffff9485169587019590955292909116606085015267ffffffffffffffff1660808401526fffffffffffffffffffffffffffffffff90811660a08401521660c082015260e00161035a565b34801561093d57600080fd5b5061043061094c366004614532565b612057565b34801561095d57600080fd5b506104b261096c366004613f99565b60cf6020526000908152604090205481565b34801561098a57600080fd5b50610430610999366004614532565b612062565b3480156109aa57600080fd5b506104b26109b936600461402a565b60d060209081526000928352604080842090915290825290205481565b3480156109e257600080fd5b506104306109f136600461456b565b61214d565b348015610a0257600080fd5b506104b26101945481565b348015610a1957600080fd5b50610a226121db565b60405161035a91906145d7565b348015610a3b57600080fd5b506103cb610a4a366004613f99565b612294565b610430610a5d366004614620565b61244e565b348015610a6e57600080fd5b506034546001600160a01b03166103f8565b348015610a8c57600080fd5b50610430610a9b366004614441565b612457565b348015610aac57600080fd5b506104b2610abb366004613f99565b61258d565b348015610acc57600080fd5b5061034e610adb36600461463c565b6001600160a01b0391821660009081526101326020908152604080832093909416825291909152205460ff1690565b348015610b1657600080fd5b50610430610b25366004613f99565b612628565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480610bbd57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610c0957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606061012d8054610c1f9061466a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4b9061466a565b8015610c985780601f10610c6d57610100808354040283529160200191610c98565b820191906000526020600020905b815481529060010190602001808311610c7b57829003601f168201915b5050505050905090565b6000610cad826126b7565b50600090815261013160205260409020546001600160a01b031690565b6000610cd5826119e8565b9050806001600160a01b0316836001600160a01b031603610d635760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610d9e57506001600160a01b03811660009081526101326020908152604080832033845290915290205460ff165b610e105760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610d5a565b610e1a838361271c565b505050565b33600090815260cc602052604090205460ff16610e68576040517fa1b035c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e7384612798565b6040805160e0810182528981526001600160a01b0389166020808301829052600091825260cd90528281208054949550919392840192610eb69061ffff166146b4565b825461ffff9182166101009390930a83810290830219909116179092558252851660208201526000604082018190526060820152608001610eff670de0b6b3a7640000886146d5565b6fffffffffffffffffffffffffffffffff908116909152600083815260ce60209081526040918290208451815590840151600182018054938601516060870151608088015167ffffffffffffffff1678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff61ffff928316760100000000000000000000000000000000000000000000021675ffffffffffffffffffffffffffffffffffffffffffff9290931674010000000000000000000000000000000000000000027fffffffffffffffffffff000000000000000000000000000000000000000000009097166001600160a01b03909516949094179590951794909416939093171790915560a083015160c090930151821670010000000000000000000000000000000002929091169190911760029091015561104f86826127f5565b60cb546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201889052909116906340c10f1990604401600060405180830381600087803b1580156110b657600080fd5b505af11580156110ca573d6000803e3d6000fd5b5050505080866001600160a01b0316887faf1bba31184b4d13e4f756b22fc2755d77b6ad147f10a7b12ea6afa58a2ca5f68789604051611114929190918252602082015260400190565b60405180910390a450505050505050565b6033546001600160a01b0316331461117f5760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b611189828261280f565b611191612884565b6111996128f7565b5050565b60008160028111156111b1576111b16146f7565b6111bc90600861470d565b60ff1660c060ca54901c901c60ff16670de0b6b3a7640000610c099190614730565b6033546001600160a01b031633146112385760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b60ca8190556040518181527fbf50be4abd4aca220cd35d4969b029104c5ff54c7d5f9f2e9a7b97d1ea5ef13e906020015b60405180910390a150565b61127e338261296f565b6112f05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610d5a565b610e1a8383836129ee565b600081600281111561130f5761130f6146f7565b61131a90600861470d565b60ca5460801c60ff9182161c1692915050565b6033546001600160a01b031633146113875760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b60005b8381101561146257600160cc60008787858181106113aa576113aa614747565b90506020020160208101906113bf91906142f7565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557fc648f6265408cc54c0dc26d24ba51dfc9f35ce1a63baa2228f65d93aaf11cc6785858381811061141a5761141a614747565b905060200201602081019061142f91906142f7565b604080516001600160a01b039092168252600160208301520160405180910390a18061145a8161475d565b91505061138a565b5060005b818110156115355760cc600084848481811061148457611484614747565b905060200201602081019061149991906142f7565b6001600160a01b031681526020810191909152604001600020805460ff191690557fc648f6265408cc54c0dc26d24ba51dfc9f35ce1a63baa2228f65d93aaf11cc678383838181106114ed576114ed614747565b905060200201602081019061150291906142f7565b604080516001600160a01b039092168252600060208301520160405180910390a18061152d8161475d565b915050611466565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115da5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610d5a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116357f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146116b15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610d5a565b6116ba81612c34565b604080516000808252602082019092526116d691839190612c8e565b50565b610e1a8383836040518060200160405280600081525061214d565b6034546001600160a01b0316331461174e5760405162461bcd60e51b815260206004820152601e60248201527f536166654f776e61626c653a2063616c6c657220213d2070656e64696e6700006044820152606401610d5a565b611756612e2e565b565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036117f65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610d5a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146118cd5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610d5a565b6118d682612c34565b61119982826001612c8e565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119825760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610d5a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60008160048111156119bb576119bb6146f7565b6119c690600861470d565b60ff16604060ca54901c901c60ff16670de0b6b3a7640000610c099190614730565b600081815261012f60205260408120546001600160a01b031680610c095760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610d5a565b60006001600160a01b038216611acc5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610d5a565b506001600160a01b03166000908152610130602052604090205490565b6033546001600160a01b03163314611b435760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b6117566000612ea4565b61019580548190611b5d9061466a565b80601f0160208091040260200160405190810160405280929190818152602001828054611b899061466a565b8015611bd65780601f10611bab57610100808354040283529160200191611bd6565b820191906000526020600020905b815481529060010190602001808311611bb957829003601f168201915b5050505050908060010154905082565b6000816004811115611bfa57611bfa6146f7565b611c0590600861470d565b60ca5460ff9182161c1692915050565b600054610100900460ff1615808015611c355750600054600160ff909116105b80611c4f5750303b158015611c4f575060005460ff166001145b611cc15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610d5a565b6000805460ff191660011790558015611ce4576000805461ff0019166101001790555b60cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03891617905560c986905560ca859055611d1f84612f27565b611d29838361280f565b611d31612884565b611d396128f7565b8015611d7f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b600082815260cf60205260408120805490918391839190611daa908490614777565b909155505033600090815260d0602090815260408083208684529091528120805490918491839190611ddd908490614777565b909155505060cb546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e70919061478a565b5060408051338152602081018690529081018490527f5c09e6483f1552208cf891fa28d135269484ad74a848ad491913fb4b386ffcf0906060015b60405180910390a150505050565b6033546001600160a01b03163314611f135760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b60cb546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063a9059cbb90339083906370a0823190602401602060405180830381865afa158015611f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa291906147a7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015612005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d6919061478a565b6120368585858585612f9b565b61203f86613043565b505050505050565b606061012e8054610c1f9061466a565b6111993383836131ba565b6033546001600160a01b031633146120bc5760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b6001600160a01b0382166121125760405162461bcd60e51b815260206004820152601b60248201527f536166654f776e61626c653a206e6577206f776e6572206973203000000000006044820152606401610d5a565b80156121215761119982612ea4565b6034805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555050565b612157338361296f565b6121c95760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610d5a565b6121d584848484613289565b50505050565b606061228f6101956040518060400160405290816000820180546121fe9061466a565b80601f016020809104026020016040519081016040528092919081815260200182805461222a9061466a565b80156122775780601f1061224c57610100808354040283529160200191612277565b820191906000526020600020905b81548152906001019060200180831161225a57829003601f168201915b50505050508152602001600182015481525050613312565b905090565b606061229f826126b7565b610c096122aa610c0f565b6000848152610191602090815260408083205460ce90925291829020600181015460029091015492517fa48f184a00000000000000000000000000000000000000000000000000000000815260e060048083019190915260e48201527f7365656400000000000000000000000000000000000000000000000000000000610104820152602481019290925261ffff7601000000000000000000000000000000000000000000008204811660448401527401000000000000000000000000000000000000000082041660648301526001600160a01b031660848201526fffffffffffffffffffffffffffffffff80831660a483015270010000000000000000000000000000000090920490911660c482015261242990736Cc913AC77db058d9EE752Ad3450A0516b8356329063a48f184a9061012401600060405180830381865af41580156123fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261242491908101906147c0565b6133c6565b60405160200161243a92919061482e565b6040516020818303038152906040526133c6565b6116d681613043565b612460826126b7565b60cb546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156124d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f4919061478a565b50600082815260cf60205260408120805490918391839190612517908490614925565b909155505033600090815260d060209081526040808320868452909152812080549091849183919061254a908490614925565b909155505060408051338152602081018690529081018490527f58c7b3bf0b0e168048426c1e9443a72696526292ca664e18b11f934cd6cfbbf390606001611eab565b6000806125b16101956040518060400160405290816000820180546121fe9061466a565b905060005b606481101561261e578361019160008484815181106125d7576125d7614747565b602002602001015162ffffff16815260200190815260200160002054101561260c57612604816001614925565b949350505050565b806126168161475d565b9150506125b6565b5060009392505050565b6033546001600160a01b031633146126825760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b60c98190556040518181527fae0c05ecd507ea9cded837adb5c433fa5e8c24ef117806d7050ec4432a743f1d90602001611269565b600081815261012f60205260409020546001600160a01b03166116d65760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610d5a565b600081815261013160205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061275f826119e8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6101938054600091839161019191849182906127b89062ffffff16614938565b825462ffffff9182166101009390930a83810290830219909116179092558252602082019290925260400160002091909155610193541692915050565b611199828260405180602001604052806000815250613519565b600054610100900460ff1661287a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b61119982826135a2565b600054610100900460ff166128ef5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b611756613628565b600054610100900460ff166129625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b611756610195606461369b565b60008061297b836119e8565b9050806001600160a01b0316846001600160a01b031614806129c357506001600160a01b038082166000908152610132602090815260408083209388168352929052205460ff165b806126045750836001600160a01b03166129dc84610ca2565b6001600160a01b031614949350505050565b826001600160a01b0316612a01826119e8565b6001600160a01b031614612a7d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610d5a565b6001600160a01b038216612af85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610d5a565b612b0583838360016136f9565b826001600160a01b0316612b18826119e8565b6001600160a01b031614612b945760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610d5a565b600081815261013160209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b03878116808652610130855283862080546000190190559087168086528386208054600101905586865261012f90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6033546001600160a01b031633146116d65760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612cc157610e1a83613783565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612d1b575060408051601f3d908101601f19168201909252612d18918101906147a7565b60015b612d8d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610d5a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612e225760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610d5a565b50610e1a83838361384e565b6033546034546040516001600160a01b03928316929091169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350603480546033805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103819055603380546001600160a01b0380841673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16612f925760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b6116d681613873565b60cb546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8316608482015260a4810185905260c481018490526001600160a01b039091169063d505accf9060e401600060405180830381600087803b15801561302457600080fd5b505af1158015613038573d6000803e3d6000fd5b505050505050505050565b60c95434101561307f576040517f5945ea5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c95433906108fc906130929034614777565b6040518115909202916000818181858888f193505050501580156130ba573d6000803e3d6000fd5b5060006130ca82602001516119a7565b82516130d59061119d565b6130df9190614925565b60cb546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018390529192506001600160a01b0316906379cc679090604401600060405180830381600087803b15801561314557600080fd5b505af1158015613159573d6000803e3d6000fd5b5050505061316a8260200151611be6565b8251613175906112fb565b8351602085015160405133927f87fb928ac5e68966565b76ad225a282c4bdac2194b64d495dfe59b91c963fd3a926131ae928890614950565b60405180910390a45050565b816001600160a01b0316836001600160a01b03160361321b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610d5a565b6001600160a01b0383811660008181526101326020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6132948484846129ee565b6132a0848484846138e7565b6121d55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610d5a565b6060816020015167ffffffffffffffff811115613331576133316140a6565b60405190808252806020026020018201604052801561335a578160200160208202803683370190505b50905060005b82602001518163ffffffff1610156133c057613382838263ffffffff16613a88565b828263ffffffff168151811061339a5761339a614747565b62ffffff90921660209283029190910190910152806133b881614988565b915050613360565b50919050565b606081516000036133e557505060408051602081019091526000815290565b6000604051806060016040528060408152602001614b6760409139905060006003845160026134149190614925565b61341e91906146d5565b613429906004614730565b67ffffffffffffffff811115613441576134416140a6565b6040519080825280601f01601f19166020018201604052801561346b576020820181803683370190505b509050600182016020820185865187015b808210156134d7576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061347c565b50506003865106600181146134f357600281146135065761350e565b603d6001830353603d600283035361350e565b603d60018303535b509195945050505050565b6135238383613bb1565b61353060008484846138e7565b610e1a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610d5a565b600054610100900460ff1661360d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b61012d61361a83826149e7565b5061012e610e1a82826149e7565b600054610100900460ff166136935760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b600161015f55565b600182018190556136ed8167ffffffffffffffff8111156136be576136be6140a6565b6040519080825280602002602001820160405280156136e7578160200160208202803683370190505b50613d5b565b8290610e1a90826149e7565b60018111156121d5576001600160a01b03841615613740576001600160a01b038416600090815261013060205260408120805483929061373a908490614777565b90915550505b6001600160a01b038316156121d5576001600160a01b0383166000908152610130602052604081208054839290613778908490614925565b909155505050505050565b6001600160a01b0381163b6138005760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610d5a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61385783613db9565b6000825111806138645750805b15610e1a576121d58383613df9565b600054610100900460ff166138de5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b6116d681612ea4565b60006001600160a01b0384163b15613a7d576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290613944903390899088908890600401614aa7565b6020604051808303816000875af192505050801561397f575060408051601f3d908101601f1916820190925261397c91810190614ae3565b60015b613a32573d8080156139ad576040519150601f19603f3d011682016040523d82523d6000602084013e6139b2565b606091505b508051600003613a2a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610d5a565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612604565b506001949350505050565b81516000908190613a9a846003614730565b81518110613aaa57613aaa614747565b016020015184517fff0000000000000000000000000000000000000000000000000000000000000090911690613ae1856003614730565b613aec906001614925565b81518110613afc57613afc614747565b016020015185517fff0000000000000000000000000000000000000000000000000000000000000090911690613b33866003614730565b613b3e906002614925565b81518110613b4e57613b4e614747565b016020908101516040517fff000000000000000000000000000000000000000000000000000000000000009485169281019290925291831660218201529116602282015260230160408051601f1981840301815291905260030151949350505050565b6001600160a01b038216613c075760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610d5a565b600081815261012f60205260409020546001600160a01b031615613c6d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d5a565b613c7b6000838360016136f9565b600081815261012f60205260409020546001600160a01b031615613ce15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d5a565b6001600160a01b0382166000818152610130602090815260408083208054600101905584835261012f909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b606060005b82518110156133c05781838281518110613d7c57613d7c614747565b6020026020010151604051602001613d95929190614b00565b60405160208183030381529060405291508080613db19061475d565b915050613d60565b613dc281613783565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613e785760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610d5a565b600080846001600160a01b031684604051613e939190614b4a565b600060405180830381855af49150503d8060008114613ece576040519150601f19603f3d011682016040523d82523d6000602084013e613ed3565b606091505b5091509150613efb8282604051806060016040528060278152602001614ba760279139613f04565b95945050505050565b60608315613f13575081613f1d565b613f1d8383613f24565b9392505050565b815115613f345781518083602001fd5b8060405162461bcd60e51b8152600401610d5a9190614002565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146116d657600080fd5b600060208284031215613f8e57600080fd5b8135613f1d81613f4e565b600060208284031215613fab57600080fd5b5035919050565b60005b83811015613fcd578181015183820152602001613fb5565b50506000910152565b60008151808452613fee816020860160208601613fb2565b601f01601f19169290920160200192915050565b602081526000613f1d6020830184613fd6565b6001600160a01b03811681146116d657600080fd5b6000806040838503121561403d57600080fd5b823561404881614015565b946020939093013593505050565b60008060008060008060c0878903121561406f57600080fd5b86359550602087013561408181614015565b95989597505050506040840135936060810135936080820135935060a0909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156140e5576140e56140a6565b604052919050565b600067ffffffffffffffff821115614107576141076140a6565b50601f01601f191660200190565b600082601f83011261412657600080fd5b8135614139614134826140ed565b6140bc565b81815284602083860101111561414e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561417e57600080fd5b823567ffffffffffffffff8082111561419657600080fd5b6141a286838701614115565b935060208501359150808211156141b857600080fd5b506141c585828601614115565b9150509250929050565b8035600381106141de57600080fd5b919050565b6000602082840312156141f557600080fd5b613f1d826141cf565b60008060006060848603121561421357600080fd5b833561421e81614015565b9250602084013561422e81614015565b929592945050506040919091013590565b60008083601f84011261425157600080fd5b50813567ffffffffffffffff81111561426957600080fd5b6020830191508360208260051b850101111561428457600080fd5b9250929050565b600080600080604085870312156142a157600080fd5b843567ffffffffffffffff808211156142b957600080fd5b6142c58883890161423f565b909650945060208701359150808211156142de57600080fd5b506142eb8782880161423f565b95989497509550505050565b60006020828403121561430957600080fd5b8135613f1d81614015565b6000806040838503121561432757600080fd5b823561433281614015565b9150602083013567ffffffffffffffff81111561434e57600080fd5b6141c585828601614115565b8035600581106141de57600080fd5b60006020828403121561437b57600080fd5b613f1d8261435a565b6040815260006143976040830185613fd6565b90508260208301529392505050565b60008060008060008060c087890312156143bf57600080fd5b86356143ca81614015565b9550602087013594506040870135935060608701356143e881614015565b9250608087013567ffffffffffffffff8082111561440557600080fd5b6144118a838b01614115565b935060a089013591508082111561442757600080fd5b5061443489828a01614115565b9150509295509295509295565b6000806040838503121561445457600080fd5b50508035926020909101359150565b60006040828403121561447557600080fd5b6040516040810181811067ffffffffffffffff82111715614498576144986140a6565b6040529050806144a7836141cf565b81526144b56020840161435a565b60208201525092915050565b60008060008060008060e087890312156144da57600080fd5b6144e48888614463565b955060408701359450606087013593506080870135925060a0870135915060c087013560ff8116811461451657600080fd5b809150509295509295509295565b80151581146116d657600080fd5b6000806040838503121561454557600080fd5b823561455081614015565b9150602083013561456081614524565b809150509250929050565b6000806000806080858703121561458157600080fd5b843561458c81614015565b9350602085013561459c81614015565b925060408501359150606085013567ffffffffffffffff8111156145bf57600080fd5b6145cb87828801614115565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561461457835162ffffff16835292840192918401916001016145f3565b50909695505050505050565b60006040828403121561463257600080fd5b613f1d8383614463565b6000806040838503121561464f57600080fd5b823561465a81614015565b9150602083013561456081614015565b600181811c9082168061467e57607f821691505b6020821081036133c057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff8083168181036146cb576146cb61469e565b6001019392505050565b6000826146f257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b60ff81811683821602908116908181146147295761472961469e565b5092915050565b8082028115828204841417610c0957610c0961469e565b634e487b7160e01b600052603260045260246000fd5b600060001982036147705761477061469e565b5060010190565b81810381811115610c0957610c0961469e565b60006020828403121561479c57600080fd5b8151613f1d81614524565b6000602082840312156147b957600080fd5b5051919050565b6000602082840312156147d257600080fd5b815167ffffffffffffffff8111156147e957600080fd5b8201601f810184136147fa57600080fd5b8051614808614134826140ed565b81815285602083850101111561481d57600080fd5b613efb826020830160208601613fb2565b7f7b226e616d65223a20220000000000000000000000000000000000000000000081526000835161486681600a850160208801613fb2565b7f222c226465736372697074696f6e223a22000000000000000000000000000000600a918401918201527f222c22696d616765223a22000000000000000000000000000000000000000000601b8201527f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000602682015283516148ef816040840160208801613fb2565b7f227d00000000000000000000000000000000000000000000000000000000000060409290910191820152604201949350505050565b80820180821115610c0957610c0961469e565b600062ffffff8083168181036146cb576146cb61469e565b6060810160038510614964576149646146f7565b84825260058410614977576149776146f7565b602082019390935260400152919050565b600063ffffffff8083168181036146cb576146cb61469e565b601f821115610e1a57600081815260208120601f850160051c810160208610156149c85750805b601f850160051c820191505b8181101561203f578281556001016149d4565b815167ffffffffffffffff811115614a0157614a016140a6565b614a1581614a0f845461466a565b846149a1565b602080601f831160018114614a4a5760008415614a325750858301515b600019600386901b1c1916600185901b17855561203f565b600085815260208120601f198616915b82811015614a7957888601518255948401946001909101908401614a5a565b5085821015614a975787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614ad96080830184613fd6565b9695505050505050565b600060208284031215614af557600080fd5b8151613f1d81613f4e565b60008351614b12818460208801613fb2565b60e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000169190920190815260030192915050565b60008251614b5c818460208701613fb2565b919091019291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205ecfdcf0aa07f10e21f516a4f66fa9ad2d46627871fcd912549373bbef216f1864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103295760003560e01c8063736c0d5b116101a5578063ac4afa38116100ec578063c87b56dd11610095578063e4421be21161006f578063e4421be214610a80578063e4e3b32b14610aa0578063e985e9c514610ac0578063f11925d714610b0a57600080fd5b8063c87b56dd14610a2f578063dbcd0a5814610a4f578063e30c397814610a6257600080fd5b8063b88d4fde116100c6578063b88d4fde146109d6578063c208d41a146109f6578063c546286514610a0d57600080fd5b8063ac4afa3814610951578063b242e5341461097e578063b470a9b51461099e57600080fd5b8063853828b61161014e57806395d89b411161012857806395d89b41146107e4578063a005ec7a146107f9578063a22cb4651461093157600080fd5b8063853828b61461079e578063869bdf67146107b35780638da5cb5b146107c657600080fd5b80637cad554d1161017f5780637cad554d1461073e57806380619b611461075e578063829a1d091461077e57600080fd5b8063736c0d5b146106ba5780637447aa08146106ea578063795dbede1461070d57600080fd5b8063314b8dbd1161027457806352d1902d1161021d5780636352211e116101f75780636352211e1461064f578063670506e91461066f57806370a0823114610685578063715018a6146106a557600080fd5b806352d1902d146105d657806356fc2fa6146105eb57806360b127eb1461060b57600080fd5b806342842e0e1161024e57806342842e0e1461058e5780634e71e0c8146105ae5780634f1ef286146105c357600080fd5b8063314b8dbd1461052e578063350b23691461054e5780633659cfe61461056e57600080fd5b806316a065c6116102d65780631dae2436116102b05780631dae2436146104c057806323b872dd146104e05780632ee691a31461050057600080fd5b806316a065c614610452578063171d49521461047257806318ac12541461049257600080fd5b8063081812fc11610307578063081812fc146103d8578063095ea7b3146104105780630aeb55c81461043257600080fd5b806301ffc9a71461032e578063068bcd8d1461036357806306fdde03146103b6575b600080fd5b34801561033a57600080fd5b5061034e610349366004613f7c565b610b2a565b60405190151581526020015b60405180910390f35b34801561036f57600080fd5b506103a761037e366004613f99565b604080516020808201835260009182905292815260cf8352819020815192830190915254815290565b6040519051815260200161035a565b3480156103c257600080fd5b506103cb610c0f565b60405161035a9190614002565b3480156103e457600080fd5b506103f86103f3366004613f99565b610ca2565b6040516001600160a01b03909116815260200161035a565b34801561041c57600080fd5b5061043061042b36600461402a565b610cca565b005b34801561043e57600080fd5b5061043061044d366004614056565b610e1f565b34801561045e57600080fd5b5060cb546103f8906001600160a01b031681565b34801561047e57600080fd5b5061043061048d36600461416b565b611125565b34801561049e57600080fd5b506104b26104ad3660046141e3565b61119d565b60405190815260200161035a565b3480156104cc57600080fd5b506104306104db366004613f99565b6111de565b3480156104ec57600080fd5b506104306104fb3660046141fe565b611274565b34801561050c57600080fd5b506104b261051b366004613f99565b6101916020526000908152604090205481565b34801561053a57600080fd5b506104b26105493660046141e3565b6112fb565b34801561055a57600080fd5b5061043061056936600461428b565b61132d565b34801561057a57600080fd5b506104306105893660046142f7565b61153c565b34801561059a57600080fd5b506104306105a93660046141fe565b6116d9565b3480156105ba57600080fd5b506104306116f4565b6104306105d1366004614314565b611758565b3480156105e257600080fd5b506104b26118e2565b3480156105f757600080fd5b506104b2610606366004614369565b6119a7565b34801561061757600080fd5b5061063c6106263660046142f7565b60cd6020526000908152604090205461ffff1681565b60405161ffff909116815260200161035a565b34801561065b57600080fd5b506103f861066a366004613f99565b6119e8565b34801561067b57600080fd5b506104b260c95481565b34801561069157600080fd5b506104b26106a03660046142f7565b611a4e565b3480156106b157600080fd5b50610430611ae9565b3480156106c657600080fd5b5061034e6106d53660046142f7565b60cc6020526000908152604090205460ff1681565b3480156106f657600080fd5b506106ff611b4d565b60405161035a929190614384565b34801561071957600080fd5b506101935461072a9062ffffff1681565b60405162ffffff909116815260200161035a565b34801561074a57600080fd5b506104b2610759366004614369565b611be6565b34801561076a57600080fd5b506104306107793660046143a6565b611c15565b34801561078a57600080fd5b50610430610799366004614441565b611d88565b3480156107aa57600080fd5b50610430611eb9565b6104306107c13660046144c1565b612029565b3480156107d257600080fd5b506033546001600160a01b03166103f8565b3480156107f057600080fd5b506103cb612047565b34801561080557600080fd5b506108ce610814366004613f99565b60ce6020526000908152604090208054600182015460029092015490916001600160a01b0381169174010000000000000000000000000000000000000000820461ffff90811692760100000000000000000000000000000000000000000000810490911691780100000000000000000000000000000000000000000000000090910467ffffffffffffffff16906fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041687565b604080519788526001600160a01b03909616602088015261ffff9485169587019590955292909116606085015267ffffffffffffffff1660808401526fffffffffffffffffffffffffffffffff90811660a08401521660c082015260e00161035a565b34801561093d57600080fd5b5061043061094c366004614532565b612057565b34801561095d57600080fd5b506104b261096c366004613f99565b60cf6020526000908152604090205481565b34801561098a57600080fd5b50610430610999366004614532565b612062565b3480156109aa57600080fd5b506104b26109b936600461402a565b60d060209081526000928352604080842090915290825290205481565b3480156109e257600080fd5b506104306109f136600461456b565b61214d565b348015610a0257600080fd5b506104b26101945481565b348015610a1957600080fd5b50610a226121db565b60405161035a91906145d7565b348015610a3b57600080fd5b506103cb610a4a366004613f99565b612294565b610430610a5d366004614620565b61244e565b348015610a6e57600080fd5b506034546001600160a01b03166103f8565b348015610a8c57600080fd5b50610430610a9b366004614441565b612457565b348015610aac57600080fd5b506104b2610abb366004613f99565b61258d565b348015610acc57600080fd5b5061034e610adb36600461463c565b6001600160a01b0391821660009081526101326020908152604080832093909416825291909152205460ff1690565b348015610b1657600080fd5b50610430610b25366004613f99565b612628565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480610bbd57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610c0957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606061012d8054610c1f9061466a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4b9061466a565b8015610c985780601f10610c6d57610100808354040283529160200191610c98565b820191906000526020600020905b815481529060010190602001808311610c7b57829003601f168201915b5050505050905090565b6000610cad826126b7565b50600090815261013160205260409020546001600160a01b031690565b6000610cd5826119e8565b9050806001600160a01b0316836001600160a01b031603610d635760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b0382161480610d9e57506001600160a01b03811660009081526101326020908152604080832033845290915290205460ff165b610e105760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610d5a565b610e1a838361271c565b505050565b33600090815260cc602052604090205460ff16610e68576040517fa1b035c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e7384612798565b6040805160e0810182528981526001600160a01b0389166020808301829052600091825260cd90528281208054949550919392840192610eb69061ffff166146b4565b825461ffff9182166101009390930a83810290830219909116179092558252851660208201526000604082018190526060820152608001610eff670de0b6b3a7640000886146d5565b6fffffffffffffffffffffffffffffffff908116909152600083815260ce60209081526040918290208451815590840151600182018054938601516060870151608088015167ffffffffffffffff1678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff61ffff928316760100000000000000000000000000000000000000000000021675ffffffffffffffffffffffffffffffffffffffffffff9290931674010000000000000000000000000000000000000000027fffffffffffffffffffff000000000000000000000000000000000000000000009097166001600160a01b03909516949094179590951794909416939093171790915560a083015160c090930151821670010000000000000000000000000000000002929091169190911760029091015561104f86826127f5565b60cb546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201889052909116906340c10f1990604401600060405180830381600087803b1580156110b657600080fd5b505af11580156110ca573d6000803e3d6000fd5b5050505080866001600160a01b0316887faf1bba31184b4d13e4f756b22fc2755d77b6ad147f10a7b12ea6afa58a2ca5f68789604051611114929190918252602082015260400190565b60405180910390a450505050505050565b6033546001600160a01b0316331461117f5760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b611189828261280f565b611191612884565b6111996128f7565b5050565b60008160028111156111b1576111b16146f7565b6111bc90600861470d565b60ff1660c060ca54901c901c60ff16670de0b6b3a7640000610c099190614730565b6033546001600160a01b031633146112385760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b60ca8190556040518181527fbf50be4abd4aca220cd35d4969b029104c5ff54c7d5f9f2e9a7b97d1ea5ef13e906020015b60405180910390a150565b61127e338261296f565b6112f05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610d5a565b610e1a8383836129ee565b600081600281111561130f5761130f6146f7565b61131a90600861470d565b60ca5460801c60ff9182161c1692915050565b6033546001600160a01b031633146113875760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b60005b8381101561146257600160cc60008787858181106113aa576113aa614747565b90506020020160208101906113bf91906142f7565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557fc648f6265408cc54c0dc26d24ba51dfc9f35ce1a63baa2228f65d93aaf11cc6785858381811061141a5761141a614747565b905060200201602081019061142f91906142f7565b604080516001600160a01b039092168252600160208301520160405180910390a18061145a8161475d565b91505061138a565b5060005b818110156115355760cc600084848481811061148457611484614747565b905060200201602081019061149991906142f7565b6001600160a01b031681526020810191909152604001600020805460ff191690557fc648f6265408cc54c0dc26d24ba51dfc9f35ce1a63baa2228f65d93aaf11cc678383838181106114ed576114ed614747565b905060200201602081019061150291906142f7565b604080516001600160a01b039092168252600060208301520160405180910390a18061152d8161475d565b915050611466565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115da5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610d5a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116357f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146116b15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610d5a565b6116ba81612c34565b604080516000808252602082019092526116d691839190612c8e565b50565b610e1a8383836040518060200160405280600081525061214d565b6034546001600160a01b0316331461174e5760405162461bcd60e51b815260206004820152601e60248201527f536166654f776e61626c653a2063616c6c657220213d2070656e64696e6700006044820152606401610d5a565b611756612e2e565b565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036117f65760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610d5a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146118cd5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610d5a565b6118d682612c34565b61119982826001612c8e565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119825760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610d5a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60008160048111156119bb576119bb6146f7565b6119c690600861470d565b60ff16604060ca54901c901c60ff16670de0b6b3a7640000610c099190614730565b600081815261012f60205260408120546001600160a01b031680610c095760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610d5a565b60006001600160a01b038216611acc5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610d5a565b506001600160a01b03166000908152610130602052604090205490565b6033546001600160a01b03163314611b435760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b6117566000612ea4565b61019580548190611b5d9061466a565b80601f0160208091040260200160405190810160405280929190818152602001828054611b899061466a565b8015611bd65780601f10611bab57610100808354040283529160200191611bd6565b820191906000526020600020905b815481529060010190602001808311611bb957829003601f168201915b5050505050908060010154905082565b6000816004811115611bfa57611bfa6146f7565b611c0590600861470d565b60ca5460ff9182161c1692915050565b600054610100900460ff1615808015611c355750600054600160ff909116105b80611c4f5750303b158015611c4f575060005460ff166001145b611cc15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610d5a565b6000805460ff191660011790558015611ce4576000805461ff0019166101001790555b60cb805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03891617905560c986905560ca859055611d1f84612f27565b611d29838361280f565b611d31612884565b611d396128f7565b8015611d7f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b600082815260cf60205260408120805490918391839190611daa908490614777565b909155505033600090815260d0602090815260408083208684529091528120805490918491839190611ddd908490614777565b909155505060cb546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e70919061478a565b5060408051338152602081018690529081018490527f5c09e6483f1552208cf891fa28d135269484ad74a848ad491913fb4b386ffcf0906060015b60405180910390a150505050565b6033546001600160a01b03163314611f135760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b60cb546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063a9059cbb90339083906370a0823190602401602060405180830381865afa158015611f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa291906147a7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015612005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d6919061478a565b6120368585858585612f9b565b61203f86613043565b505050505050565b606061012e8054610c1f9061466a565b6111993383836131ba565b6033546001600160a01b031633146120bc5760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b6001600160a01b0382166121125760405162461bcd60e51b815260206004820152601b60248201527f536166654f776e61626c653a206e6577206f776e6572206973203000000000006044820152606401610d5a565b80156121215761119982612ea4565b6034805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555050565b612157338361296f565b6121c95760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610d5a565b6121d584848484613289565b50505050565b606061228f6101956040518060400160405290816000820180546121fe9061466a565b80601f016020809104026020016040519081016040528092919081815260200182805461222a9061466a565b80156122775780601f1061224c57610100808354040283529160200191612277565b820191906000526020600020905b81548152906001019060200180831161225a57829003601f168201915b50505050508152602001600182015481525050613312565b905090565b606061229f826126b7565b610c096122aa610c0f565b6000848152610191602090815260408083205460ce90925291829020600181015460029091015492517fa48f184a00000000000000000000000000000000000000000000000000000000815260e060048083019190915260e48201527f7365656400000000000000000000000000000000000000000000000000000000610104820152602481019290925261ffff7601000000000000000000000000000000000000000000008204811660448401527401000000000000000000000000000000000000000082041660648301526001600160a01b031660848201526fffffffffffffffffffffffffffffffff80831660a483015270010000000000000000000000000000000090920490911660c48201526124299073__$bd4a62aa904e40a751e4c3f6355b6291ee$__9063a48f184a9061012401600060405180830381865af41580156123fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261242491908101906147c0565b6133c6565b60405160200161243a92919061482e565b6040516020818303038152906040526133c6565b6116d681613043565b612460826126b7565b60cb546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156124d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f4919061478a565b50600082815260cf60205260408120805490918391839190612517908490614925565b909155505033600090815260d060209081526040808320868452909152812080549091849183919061254a908490614925565b909155505060408051338152602081018690529081018490527f58c7b3bf0b0e168048426c1e9443a72696526292ca664e18b11f934cd6cfbbf390606001611eab565b6000806125b16101956040518060400160405290816000820180546121fe9061466a565b905060005b606481101561261e578361019160008484815181106125d7576125d7614747565b602002602001015162ffffff16815260200190815260200160002054101561260c57612604816001614925565b949350505050565b806126168161475d565b9150506125b6565b5060009392505050565b6033546001600160a01b031633146126825760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b60c98190556040518181527fae0c05ecd507ea9cded837adb5c433fa5e8c24ef117806d7050ec4432a743f1d90602001611269565b600081815261012f60205260409020546001600160a01b03166116d65760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610d5a565b600081815261013160205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061275f826119e8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6101938054600091839161019191849182906127b89062ffffff16614938565b825462ffffff9182166101009390930a83810290830219909116179092558252602082019290925260400160002091909155610193541692915050565b611199828260405180602001604052806000815250613519565b600054610100900460ff1661287a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b61119982826135a2565b600054610100900460ff166128ef5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b611756613628565b600054610100900460ff166129625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b611756610195606461369b565b60008061297b836119e8565b9050806001600160a01b0316846001600160a01b031614806129c357506001600160a01b038082166000908152610132602090815260408083209388168352929052205460ff165b806126045750836001600160a01b03166129dc84610ca2565b6001600160a01b031614949350505050565b826001600160a01b0316612a01826119e8565b6001600160a01b031614612a7d5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610d5a565b6001600160a01b038216612af85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610d5a565b612b0583838360016136f9565b826001600160a01b0316612b18826119e8565b6001600160a01b031614612b945760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610d5a565b600081815261013160209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b03878116808652610130855283862080546000190190559087168086528386208054600101905586865261012f90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6033546001600160a01b031633146116d65760405162461bcd60e51b815260206004820152601d60248201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e65720000006044820152606401610d5a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612cc157610e1a83613783565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612d1b575060408051601f3d908101601f19168201909252612d18918101906147a7565b60015b612d8d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610d5a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612e225760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610d5a565b50610e1a83838361384e565b6033546034546040516001600160a01b03928316929091169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350603480546033805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103819055603380546001600160a01b0380841673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16612f925760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b6116d681613873565b60cb546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8316608482015260a4810185905260c481018490526001600160a01b039091169063d505accf9060e401600060405180830381600087803b15801561302457600080fd5b505af1158015613038573d6000803e3d6000fd5b505050505050505050565b60c95434101561307f576040517f5945ea5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c95433906108fc906130929034614777565b6040518115909202916000818181858888f193505050501580156130ba573d6000803e3d6000fd5b5060006130ca82602001516119a7565b82516130d59061119d565b6130df9190614925565b60cb546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018390529192506001600160a01b0316906379cc679090604401600060405180830381600087803b15801561314557600080fd5b505af1158015613159573d6000803e3d6000fd5b5050505061316a8260200151611be6565b8251613175906112fb565b8351602085015160405133927f87fb928ac5e68966565b76ad225a282c4bdac2194b64d495dfe59b91c963fd3a926131ae928890614950565b60405180910390a45050565b816001600160a01b0316836001600160a01b03160361321b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610d5a565b6001600160a01b0383811660008181526101326020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6132948484846129ee565b6132a0848484846138e7565b6121d55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610d5a565b6060816020015167ffffffffffffffff811115613331576133316140a6565b60405190808252806020026020018201604052801561335a578160200160208202803683370190505b50905060005b82602001518163ffffffff1610156133c057613382838263ffffffff16613a88565b828263ffffffff168151811061339a5761339a614747565b62ffffff90921660209283029190910190910152806133b881614988565b915050613360565b50919050565b606081516000036133e557505060408051602081019091526000815290565b6000604051806060016040528060408152602001614b6760409139905060006003845160026134149190614925565b61341e91906146d5565b613429906004614730565b67ffffffffffffffff811115613441576134416140a6565b6040519080825280601f01601f19166020018201604052801561346b576020820181803683370190505b509050600182016020820185865187015b808210156134d7576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061347c565b50506003865106600181146134f357600281146135065761350e565b603d6001830353603d600283035361350e565b603d60018303535b509195945050505050565b6135238383613bb1565b61353060008484846138e7565b610e1a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610d5a565b600054610100900460ff1661360d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b61012d61361a83826149e7565b5061012e610e1a82826149e7565b600054610100900460ff166136935760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b600161015f55565b600182018190556136ed8167ffffffffffffffff8111156136be576136be6140a6565b6040519080825280602002602001820160405280156136e7578160200160208202803683370190505b50613d5b565b8290610e1a90826149e7565b60018111156121d5576001600160a01b03841615613740576001600160a01b038416600090815261013060205260408120805483929061373a908490614777565b90915550505b6001600160a01b038316156121d5576001600160a01b0383166000908152610130602052604081208054839290613778908490614925565b909155505050505050565b6001600160a01b0381163b6138005760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610d5a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61385783613db9565b6000825111806138645750805b15610e1a576121d58383613df9565b600054610100900460ff166138de5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d5a565b6116d681612ea4565b60006001600160a01b0384163b15613a7d576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290613944903390899088908890600401614aa7565b6020604051808303816000875af192505050801561397f575060408051601f3d908101601f1916820190925261397c91810190614ae3565b60015b613a32573d8080156139ad576040519150601f19603f3d011682016040523d82523d6000602084013e6139b2565b606091505b508051600003613a2a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610d5a565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612604565b506001949350505050565b81516000908190613a9a846003614730565b81518110613aaa57613aaa614747565b016020015184517fff0000000000000000000000000000000000000000000000000000000000000090911690613ae1856003614730565b613aec906001614925565b81518110613afc57613afc614747565b016020015185517fff0000000000000000000000000000000000000000000000000000000000000090911690613b33866003614730565b613b3e906002614925565b81518110613b4e57613b4e614747565b016020908101516040517fff000000000000000000000000000000000000000000000000000000000000009485169281019290925291831660218201529116602282015260230160408051601f1981840301815291905260030151949350505050565b6001600160a01b038216613c075760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610d5a565b600081815261012f60205260409020546001600160a01b031615613c6d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d5a565b613c7b6000838360016136f9565b600081815261012f60205260409020546001600160a01b031615613ce15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d5a565b6001600160a01b0382166000818152610130602090815260408083208054600101905584835261012f909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b606060005b82518110156133c05781838281518110613d7c57613d7c614747565b6020026020010151604051602001613d95929190614b00565b60405160208183030381529060405291508080613db19061475d565b915050613d60565b613dc281613783565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613e785760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610d5a565b600080846001600160a01b031684604051613e939190614b4a565b600060405180830381855af49150503d8060008114613ece576040519150601f19603f3d011682016040523d82523d6000602084013e613ed3565b606091505b5091509150613efb8282604051806060016040528060278152602001614ba760279139613f04565b95945050505050565b60608315613f13575081613f1d565b613f1d8383613f24565b9392505050565b815115613f345781518083602001fd5b8060405162461bcd60e51b8152600401610d5a9190614002565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146116d657600080fd5b600060208284031215613f8e57600080fd5b8135613f1d81613f4e565b600060208284031215613fab57600080fd5b5035919050565b60005b83811015613fcd578181015183820152602001613fb5565b50506000910152565b60008151808452613fee816020860160208601613fb2565b601f01601f19169290920160200192915050565b602081526000613f1d6020830184613fd6565b6001600160a01b03811681146116d657600080fd5b6000806040838503121561403d57600080fd5b823561404881614015565b946020939093013593505050565b60008060008060008060c0878903121561406f57600080fd5b86359550602087013561408181614015565b95989597505050506040840135936060810135936080820135935060a0909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156140e5576140e56140a6565b604052919050565b600067ffffffffffffffff821115614107576141076140a6565b50601f01601f191660200190565b600082601f83011261412657600080fd5b8135614139614134826140ed565b6140bc565b81815284602083860101111561414e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561417e57600080fd5b823567ffffffffffffffff8082111561419657600080fd5b6141a286838701614115565b935060208501359150808211156141b857600080fd5b506141c585828601614115565b9150509250929050565b8035600381106141de57600080fd5b919050565b6000602082840312156141f557600080fd5b613f1d826141cf565b60008060006060848603121561421357600080fd5b833561421e81614015565b9250602084013561422e81614015565b929592945050506040919091013590565b60008083601f84011261425157600080fd5b50813567ffffffffffffffff81111561426957600080fd5b6020830191508360208260051b850101111561428457600080fd5b9250929050565b600080600080604085870312156142a157600080fd5b843567ffffffffffffffff808211156142b957600080fd5b6142c58883890161423f565b909650945060208701359150808211156142de57600080fd5b506142eb8782880161423f565b95989497509550505050565b60006020828403121561430957600080fd5b8135613f1d81614015565b6000806040838503121561432757600080fd5b823561433281614015565b9150602083013567ffffffffffffffff81111561434e57600080fd5b6141c585828601614115565b8035600581106141de57600080fd5b60006020828403121561437b57600080fd5b613f1d8261435a565b6040815260006143976040830185613fd6565b90508260208301529392505050565b60008060008060008060c087890312156143bf57600080fd5b86356143ca81614015565b9550602087013594506040870135935060608701356143e881614015565b9250608087013567ffffffffffffffff8082111561440557600080fd5b6144118a838b01614115565b935060a089013591508082111561442757600080fd5b5061443489828a01614115565b9150509295509295509295565b6000806040838503121561445457600080fd5b50508035926020909101359150565b60006040828403121561447557600080fd5b6040516040810181811067ffffffffffffffff82111715614498576144986140a6565b6040529050806144a7836141cf565b81526144b56020840161435a565b60208201525092915050565b60008060008060008060e087890312156144da57600080fd5b6144e48888614463565b955060408701359450606087013593506080870135925060a0870135915060c087013560ff8116811461451657600080fd5b809150509295509295509295565b80151581146116d657600080fd5b6000806040838503121561454557600080fd5b823561455081614015565b9150602083013561456081614524565b809150509250929050565b6000806000806080858703121561458157600080fd5b843561458c81614015565b9350602085013561459c81614015565b925060408501359150606085013567ffffffffffffffff8111156145bf57600080fd5b6145cb87828801614115565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561461457835162ffffff16835292840192918401916001016145f3565b50909695505050505050565b60006040828403121561463257600080fd5b613f1d8383614463565b6000806040838503121561464f57600080fd5b823561465a81614015565b9150602083013561456081614015565b600181811c9082168061467e57607f821691505b6020821081036133c057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff8083168181036146cb576146cb61469e565b6001019392505050565b6000826146f257634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b60ff81811683821602908116908181146147295761472961469e565b5092915050565b8082028115828204841417610c0957610c0961469e565b634e487b7160e01b600052603260045260246000fd5b600060001982036147705761477061469e565b5060010190565b81810381811115610c0957610c0961469e565b60006020828403121561479c57600080fd5b8151613f1d81614524565b6000602082840312156147b957600080fd5b5051919050565b6000602082840312156147d257600080fd5b815167ffffffffffffffff8111156147e957600080fd5b8201601f810184136147fa57600080fd5b8051614808614134826140ed565b81815285602083850101111561481d57600080fd5b613efb826020830160208601613fb2565b7f7b226e616d65223a20220000000000000000000000000000000000000000000081526000835161486681600a850160208801613fb2565b7f222c226465736372697074696f6e223a22000000000000000000000000000000600a918401918201527f222c22696d616765223a22000000000000000000000000000000000000000000601b8201527f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000602682015283516148ef816040840160208801613fb2565b7f227d00000000000000000000000000000000000000000000000000000000000060409290910191820152604201949350505050565b80820180821115610c0957610c0961469e565b600062ffffff8083168181036146cb576146cb61469e565b6060810160038510614964576149646146f7565b84825260058410614977576149776146f7565b602082019390935260400152919050565b600063ffffffff8083168181036146cb576146cb61469e565b601f821115610e1a57600081815260208120601f850160051c810160208610156149c85750805b601f850160051c820191505b8181101561203f578281556001016149d4565b815167ffffffffffffffff811115614a0157614a016140a6565b614a1581614a0f845461466a565b846149a1565b602080601f831160018114614a4a5760008415614a325750858301515b600019600386901b1c1916600185901b17855561203f565b600085815260208120601f198616915b82811015614a7957888601518255948401946001909101908401614a5a565b5085821015614a975787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614ad96080830184613fd6565b9695505050505050565b600060208284031215614af557600080fd5b8151613f1d81613f4e565b60008351614b12818460208801613fb2565b60e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000169190920190815260030192915050565b60008251614b5c818460208701613fb2565b919091019291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205ecfdcf0aa07f10e21f516a4f66fa9ad2d46627871fcd912549373bbef216f1864736f6c63430008110033",
  "libraries": {
    "RenderEngine": "0x6Cc913AC77db058d9EE752Ad3450A0516b835632"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "claimOwnership()": {
        "details": "pending owner call this function to claim ownership"
      },
      "dry(uint256,uint256)": {
        "details": "degen get $REBORN back"
      },
      "engrave(bytes32,address,uint256,uint256,uint256,uint256)": {
        "details": "engrave the result on chain and reward",
        "params": {
          "seed": "uuid seed string without \"-\"  in bytes32"
        }
      },
      "findLocation(uint256)": {
        "details": "find the location in rank given a valueusually executed off-chain"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getPool(uint256)": {
        "details": "read pool attribute"
      },
      "infuse(uint256,uint256)": {
        "details": "degen infuse $REBORN to tombstoneexpect for bliss"
      },
      "initAfterUpgrade(string,string)": {
        "details": "warning: only called onece during testabandoned in production"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pendingOwner()": {
        "details": "Return the address of the pending owner"
      },
      "propertyPoint(uint8)": {
        "details": "calculate properties point for each property"
      },
      "propertyPrice(uint8)": {
        "details": "calculate properties price in $REBORN for each properties"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setPriceAndPoint(uint256)": {
        "details": "set other price"
      },
      "setSoupPrice(uint256)": {
        "details": "set soup price"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "talentPoint(uint8)": {
        "details": "calculate talent point for each talent"
      },
      "talentPrice(uint8)": {
        "details": "calculate talent price in $REBORN for each talent"
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address,bool)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership"
      },
      "updateSigners(address[],address[])": {
        "details": "update signer"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdrawAll()": {
        "details": "withdraw all $REBORN, only called during development"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "incarnate((uint8,uint8))": {
        "notice": "init enter and buy "
      },
      "incarnate((uint8,uint8),uint256,uint256,bytes32,bytes32,uint8)": {
        "notice": "init enter and buy with permit signature "
      },
      "soupPrice()": {
        "notice": "you need buy a soup before reborn "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 395,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 398,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3596,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7164,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 7166,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 7354,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 377,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 692,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8406,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "soupPrice",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 8410,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_priceAndPoint",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 8413,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "rebornToken",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(RBT)7557"
      },
      {
        "astId": 8417,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "signers",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8421,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "rounds",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 8426,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "details",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_struct(LifeDetail)8478_storage)"
      },
      {
        "astId": 8431,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "pools",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_struct(Pool)8481_storage)"
      },
      {
        "astId": 8438,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "portfolios",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Portfolio)8484_storage))"
      },
      {
        "astId": 8443,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_gap",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_uint256)42_storage"
      },
      {
        "astId": 4460,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2169,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_name",
        "offset": 0,
        "slot": "301",
        "type": "t_string_storage"
      },
      {
        "astId": 2171,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_symbol",
        "offset": 0,
        "slot": "302",
        "type": "t_string_storage"
      },
      {
        "astId": 2175,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_owners",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2179,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_balances",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2183,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2189,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3109,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "307",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 707,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_status",
        "offset": 0,
        "slot": "351",
        "type": "t_uint256"
      },
      {
        "astId": 765,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8934,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "scores",
        "offset": 0,
        "slot": "401",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8936,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "placeholder",
        "offset": 0,
        "slot": "402",
        "type": "t_uint256"
      },
      {
        "astId": 8942,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "idx",
        "offset": 0,
        "slot": "403",
        "type": "t_uint24"
      },
      {
        "astId": 8944,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "minScoreInRank",
        "offset": 0,
        "slot": "404",
        "type": "t_uint256"
      },
      {
        "astId": 8947,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "ranks",
        "offset": 0,
        "slot": "405",
        "type": "t_struct(Array)8658_storage"
      },
      {
        "astId": 8951,
        "contract": "src/RebornPortal.sol:RebornPortal",
        "label": "_gap",
        "offset": 0,
        "slot": "407",
        "type": "t_array(t_uint256)44_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)42_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[42]",
        "numberOfBytes": "1344"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(RBT)7557": {
        "encoding": "inplace",
        "label": "contract RBT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Portfolio)8484_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IRebornDefination.Portfolio))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Portfolio)8484_storage)"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(LifeDetail)8478_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRebornDefination.LifeDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(LifeDetail)8478_storage"
      },
      "t_mapping(t_uint256,t_struct(Pool)8481_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRebornDefination.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)8481_storage"
      },
      "t_mapping(t_uint256,t_struct(Portfolio)8484_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRebornDefination.Portfolio)",
        "numberOfBytes": "32",
        "value": "t_struct(Portfolio)8484_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Array)8658_storage": {
        "encoding": "inplace",
        "label": "struct CompactArray.Array",
        "members": [
          {
            "astId": 8655,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 8657,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "length",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LifeDetail)8478_storage": {
        "encoding": "inplace",
        "label": "struct IRebornDefination.LifeDetail",
        "members": [
          {
            "astId": 8465,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "seed",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8467,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8469,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "age",
            "offset": 20,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 8471,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "round",
            "offset": 22,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 8473,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "nothing",
            "offset": 24,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 8475,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "cost",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 8477,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "reward",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Pool)8481_storage": {
        "encoding": "inplace",
        "label": "struct IRebornDefination.Pool",
        "members": [
          {
            "astId": 8480,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Portfolio)8484_storage": {
        "encoding": "inplace",
        "label": "struct IRebornDefination.Portfolio",
        "members": [
          {
            "astId": 8483,
            "contract": "src/RebornPortal.sol:RebornPortal",
            "label": "accumulativeAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}